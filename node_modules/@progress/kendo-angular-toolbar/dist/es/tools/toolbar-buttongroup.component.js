/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, TemplateRef, forwardRef, ViewChild, ContentChildren, QueryList, Input } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ToolBarToolComponent } from './toolbar-tool.component';
import { ToolBarButtonComponent } from './toolbar-button.component';
import { ButtonGroupComponent } from '@progress/kendo-angular-buttons';
import { makePeeker, getIndexOfFocused, seekFocusedIndex, getNextKey, getPrevKey, areEqual } from '../util';
/**
 * Represents the Kendo UI Toolbar ButtonGroup for Angular.
 */
var ToolBarButtonGroupComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ToolBarButtonGroupComponent, _super);
    function ToolBarButtonGroupComponent(localization) {
        var _this = _super.call(this) || this;
        _this.localization = localization;
        /**
         * By default, the selection mode of the ButtonGroup is set to `multiple`.
         */
        _this.selection = 'multiple';
        /**
         * Changes the visual appearance by using alternative styling options.
         * The `look` property of the ButtonGroup takes precedence over the `look` property
         * of the individual buttons that are part of the group.
         *
         * The available values are:
         * * `bare`
         * * `flat`
         * * `outline`
         */
        _this.look = 'default';
        _this.focusedIndex = -1;
        _this.getNextKey = getNextKey(_this.localization.rtl);
        _this.getPrevKey = getPrevKey(_this.localization.rtl);
        return _this;
    }
    Object.defineProperty(ToolBarButtonGroupComponent.prototype, "buttonElements", {
        get: function () {
            return this.getButtonGroup()
                .buttons.filter(function (b) { return !b.isDisabled; })
                .map(function (b) { return b.element; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    ToolBarButtonGroupComponent.prototype.onFocus = function () {
        // triggered on tabin
        this.focusedIndex = 0;
    };
    /**
     * @hidden
     */
    ToolBarButtonGroupComponent.prototype.onNavigate = function (ev) {
        ev.preventDefault();
    };
    /**
     * @hidden
     */
    ToolBarButtonGroupComponent.prototype.selectedChangeHandler = function (state, button) {
        button.selected = state;
        button.selectedChange.emit(state);
    };
    /**
     * @hidden
     */
    ToolBarButtonGroupComponent.prototype.onButtonClick = function (ev) {
        this.focusedIndex = this.buttonElements.findIndex(function (be) { return be === ev.target || be.contains(ev.target); });
        this.focusButton(this.focusedIndex, ev);
    };
    /**
     * @hidden
     */
    ToolBarButtonGroupComponent.prototype.canFocus = function () {
        return !(this.disabled || this.buttonElements.length === 0);
    };
    /**
     * @hidden
     */
    ToolBarButtonGroupComponent.prototype.focus = function (ev) {
        if (ev === void 0) { ev = {}; }
        var nextKey = this.getNextKey(this.overflows);
        var prevKey = this.getPrevKey(this.overflows);
        this.focusedIndex = getIndexOfFocused(prevKey, nextKey, this.buttonElements)(ev);
        this.focusButton(this.focusedIndex, ev);
    };
    /**
     * @hidden
     */
    ToolBarButtonGroupComponent.prototype.handleKey = function (ev) {
        var nextKey = this.getNextKey(this.overflows);
        var prevKey = this.getPrevKey(this.overflows);
        var peekAtIndex = makePeeker(this.buttonElements);
        var isUnmodified = areEqual(this.focusedIndex);
        this.focusedIndex = seekFocusedIndex(prevKey, nextKey, peekAtIndex)(this.focusedIndex, ev);
        this.focusButton(this.focusedIndex, ev);
        return !isUnmodified(this.focusedIndex);
    };
    ToolBarButtonGroupComponent.prototype.getButtonGroup = function () {
        return this.overflows ? this.overflowButtonGroup : this.toolbarButtonGroup;
    };
    ToolBarButtonGroupComponent.prototype.focusButton = function (index, ev) {
        // Guard against focusing twice on mousedown.
        if (!ev.type || ev.type === 'focus' || ev.type === 'keydown') {
            this.buttonElements[index].focus();
        }
    };
    ToolBarButtonGroupComponent.decorators = [
        { type: Component, args: [{
                    exportAs: 'kendoToolBarButtonGroup',
                    // tslint:disable-next-line:no-forward-ref
                    providers: [LocalizationService, { provide: ToolBarToolComponent, useExisting: forwardRef(function () { return ToolBarButtonGroupComponent; }) }],
                    selector: 'kendo-toolbar-buttongroup',
                    template: "\n        <ng-template #toolbarTemplate>\n            <kendo-buttongroup\n                #toolbarButtonGroup\n                [tabIndex]=\"-1\"\n                [selection]=\"selection\"\n                [disabled]=\"disabled\"\n                [look]=\"look\"\n                [width]=\"width\"\n                (navigate)=\"onNavigate($event)\"\n                (focus)=\"onFocus()\"\n            >\n                <span\n                    kendoButton\n                    *ngFor=\"let button of buttonComponents\"\n                    [ngStyle]=\"button.style\"\n                    [ngClass]=\"button.className\"\n                    [attr.title]=\"button.title\"\n                    [disabled]=\"button.disabled\"\n                    [togglable]=\"button.togglable\"\n                    [primary]=\"button.primary\"\n                    [selected]=\"button.selected\"\n                    [icon]=\"button.toolbarOptions.icon\"\n                    [iconClass]=\"button.toolbarOptions.iconClass\"\n                    [imageUrl]=\"button.toolbarOptions.imageUrl\"\n                    (click)=\"button.click.emit($event); onButtonClick($event)\"\n                    (selectedChange)=\"selectedChangeHandler($event, button)\"\n                >\n                    {{ button.toolbarOptions.text }}\n                </span>\n            </kendo-buttongroup>\n        </ng-template>\n        <ng-template #popupTemplate>\n            <kendo-buttongroup\n                #overflowButtonGroup\n                class=\"k-overflow-button\"\n                [tabIndex]=\"-1\"\n                [selection]=\"selection\"\n                [disabled]=\"disabled\"\n                [look]=\"look\"\n                [width]=\"width\"\n            >\n                <span\n                    kendoButton\n                    class=\"k-overflow-button\"\n                    *ngFor=\"let button of buttonComponents\"\n                    [ngStyle]=\"button.style\"\n                    [ngClass]=\"button.className\"\n                    [attr.title]=\"button.title\"\n                    [disabled]=\"button.disabled\"\n                    [togglable]=\"button.togglable\"\n                    [primary]=\"button.primary\"\n                    [selected]=\"button.selected\"\n                    [icon]=\"button.overflowOptions.icon\"\n                    [iconClass]=\"button.overflowOptions.iconClass\"\n                    [imageUrl]=\"button.overflowOptions.imageUrl\"\n                    (click)=\"button.click.emit($event); onButtonClick($event)\"\n                    (selectedChange)=\"selectedChangeHandler($event, button)\"\n                >\n                    {{ button.overflowOptions.text }}\n                </span>\n            </kendo-buttongroup>\n        </ng-template>\n    "
                },] },
    ];
    /** @nocollapse */
    ToolBarButtonGroupComponent.ctorParameters = function () { return [
        { type: LocalizationService }
    ]; };
    ToolBarButtonGroupComponent.propDecorators = {
        disabled: [{ type: Input }],
        selection: [{ type: Input }],
        width: [{ type: Input }],
        look: [{ type: Input }],
        toolbarTemplate: [{ type: ViewChild, args: ['toolbarTemplate', { static: true },] }],
        popupTemplate: [{ type: ViewChild, args: ['popupTemplate', { static: true },] }],
        buttonComponents: [{ type: ContentChildren, args: [forwardRef(function () { return ToolBarButtonComponent; }),] }],
        toolbarButtonGroup: [{ type: ViewChild, args: ['toolbarButtonGroup',] }],
        overflowButtonGroup: [{ type: ViewChild, args: ['overflowButtonGroup',] }]
    };
    return ToolBarButtonGroupComponent;
}(ToolBarToolComponent));
export { ToolBarButtonGroupComponent };
