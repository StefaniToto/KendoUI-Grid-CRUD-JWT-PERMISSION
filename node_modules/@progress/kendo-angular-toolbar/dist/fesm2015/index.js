/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, Injectable, Component, Input, ElementRef, ChangeDetectorRef, NgZone, Renderer2, Output, ContentChildren, ViewChild, ViewContainerRef, ViewChildren, HostBinding, HostListener, forwardRef, NgModule } from '@angular/core';
import { PopupService, PopupModule } from '@progress/kendo-angular-popup';
import { Keys, isDocumentAvailable, ResizeSensorModule } from '@progress/kendo-angular-common';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { Subject, fromEvent } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import { DropDownButtonComponent, ButtonsModule } from '@progress/kendo-angular-buttons';
import { CommonModule } from '@angular/common';

/**
 * @hidden
 */
class RefreshService {
    constructor() {
        this.onRefresh = new EventEmitter();
    }
    refresh(tool) {
        this.onRefresh.emit(tool);
    }
}
RefreshService.decorators = [
    { type: Injectable },
];

/**
 * @hidden
 */
const focusableRegex = /^(?:a|input|select|textarea|button|object)$/i;
/**
 * @hidden
 */
function outerWidth(element) {
    var width = element.offsetWidth;
    var style = getComputedStyle(element);
    width += parseFloat(style.marginLeft) || 0 + parseFloat(style.marginRight) || 0;
    return width;
}
/**
 * @hidden
 */
function innerWidth(element) {
    var width = element.offsetWidth;
    var style = getComputedStyle(element);
    width -= parseFloat(style.paddingLeft) || 0 + parseFloat(style.borderLeftWidth) || 0;
    width -= parseFloat(style.paddingRight) || 0 + parseFloat(style.borderRightWidth) || 0;
    return width;
}
/**
 * @hidden
 */
const isVisible = (element) => {
    const rect = element.getBoundingClientRect();
    const hasSize = rect.width > 0 && rect.height > 0;
    const hasPosition = rect.x !== 0 && rect.y !== 0;
    // Elements can have zero size due to styling, but they should still count as visible.
    // For example, the selection checkbox has no size, but is made visible through styling.
    return (hasSize || hasPosition) && window.getComputedStyle(element).visibility !== 'hidden';
};
/**
 * @hidden
 */
const findElement = (node, predicate, matchSelf = true) => {
    if (!node) {
        return;
    }
    if (matchSelf && predicate(node)) {
        return node;
    }
    node = node.firstChild;
    while (node) {
        if (node.nodeType === 1) {
            const element = findElement(node, predicate);
            if (element) {
                return element;
            }
        }
        node = node.nextSibling;
    }
};
/**
 * @hidden
 */
const isFocusable = (element, checkVisibility = true) => {
    if (element.tagName) {
        const tagName = element.tagName.toLowerCase();
        const tabIndex = element.getAttribute('tabIndex');
        let focusable = tabIndex !== null;
        if (focusableRegex.test(tagName)) {
            focusable = !element.disabled;
        }
        return focusable && (!checkVisibility || isVisible(element));
    }
    return false;
};
/**
 * @hidden
 */
const findFocusable = (element, checkVisibility = true) => {
    return findElement(element, node => isFocusable(node, checkVisibility));
};
/**
 * @hidden
 */
const findFocusableChild = (element, checkVisibility = true) => {
    return findElement(element, node => isFocusable(node, checkVisibility), false);
};
/**
 * @hidden
 */
const findFocusableSibling = (element, checkVisibility = true, reverse) => {
    let node = reverse ? element.prevSibling : element.nextSibling;
    while (node) {
        if (node.nodeType === 1) {
            const result = findElement(node, el => isFocusable(el, checkVisibility));
            if (result) {
                return result;
            }
        }
        node = reverse ? node.prevSibling : node.nextSibling;
    }
};
/**
 * @hidden
 */
const isPresent = (value) => value !== null && value !== undefined;
/**
 * @hidden
 */
const makePeeker = (collection) => (index) => isPresent(collection[index]);
/**
 * @hidden
 */
const getIndexOfFocused = (prevKeyCode, nextKeyCode, collection) => (ev) => {
    switch (ev.type) {
        case 'keydown':
            if (ev.keyCode === prevKeyCode) {
                return collection.length - 1;
            }
            if (ev.keyCode === nextKeyCode) {
                return 0;
            }
            break;
        case 'click':
            return collection.findIndex(be => be === ev.target || be.contains(ev.target));
        case 'focus':
            return 0;
        default:
            return 0;
    }
};
/**
 * @hidden
 */
const seekFocusedIndex = (prevKeyCode, nextKeyCode, seeker) => (startIndex, ev) => {
    switch (ev.keyCode) {
        case prevKeyCode:
            return seeker(startIndex - 1) ? startIndex - 1 : startIndex;
        case nextKeyCode:
            return seeker(startIndex + 1) ? startIndex + 1 : startIndex;
        default:
            return startIndex;
    }
};
/**
 * @hidden
 */
const areEqual = (first) => (second) => first === second;
/**
 * @hidden
 */
const getNextKey = (rtl = false) => (overflows = true) => overflows ? Keys.ArrowDown : rtl ? Keys.ArrowLeft : Keys.ArrowRight;
/**
 * @hidden
 */
const getPrevKey = (rtl = false) => (overflows = true) => overflows ? Keys.ArrowUp : rtl ? Keys.ArrowRight : Keys.ArrowLeft;
/**
 * @hidden
 */
const getValueForLocation = (property, displayMode, overflows) => {
    switch (displayMode) {
        case 'toolbar':
            return overflows ? undefined : property;
        case 'overflow':
            return overflows ? property : undefined;
        default:
            return property;
    }
};

/**
 * @hidden
 */
class NavigationService {
    constructor() {
        this.focused = { renderedTool: null, index: -1 };
        this.renderedTools = [];
        this.isPopupFocused = false;
        this.isOverflowButtonFocused = false;
    }
    setRenderedTools(rts) {
        this.renderedTools = [...rts];
    }
    click({ context, event: ev }) {
        if (this.focused.renderedTool !== context && ev) {
            this.focus(context, ev);
        }
    }
    moveFocusToToolBar() {
        this.isPopupFocused = false;
        this.focusOverflowButton();
    }
    moveFocusToPopup() {
        this.isPopupFocused = true;
        this.blurOverflowButton();
        this.focus();
    }
    focusNext(ev) {
        if (!this.isOverflowButtonFocused && this.focused.renderedTool && !this.focused.renderedTool.tool.handleKey(ev)) {
            const nextRT = this.getFocusableTools().slice(this.focused.index + 1)[0];
            if (nextRT) {
                this.focus(nextRT, ev);
            }
            else {
                if (this.isOverflowButtonVisible() && !this.isPopupFocused) {
                    this.focusOverflowButton();
                }
            }
        }
    }
    focusPrev(ev) {
        if (this.isOverflowButtonFocused) {
            const lastFocusableRT = this.getFocusableTools().reverse()[0];
            this.focus(lastFocusableRT, ev);
        }
        else if (this.focused.renderedTool && !this.focused.renderedTool.tool.handleKey(ev)) {
            const prevRT = this.getFocusableTools()
                .slice(0, this.focused.index)
                .reverse()[0];
            if (prevRT) {
                this.focus(prevRT, ev);
            }
        }
    }
    resetNavigation() {
        this.blurOverflowButton();
        this.focused.renderedTool = null;
        this.focused.index = -1;
    }
    focusFirst(ev) {
        const firstTool = this.getFocusableTools()[0];
        if (firstTool) {
            this.focused.renderedTool = firstTool;
            this.focused.index = this.getFocusableTools().findIndex(rt => rt === firstTool);
            this.focus(firstTool, ev);
        }
    }
    getFocusableTools() {
        return this.renderedTools.filter(rt => rt.tool.overflows === this.isPopupFocused && rt.tool.canFocus());
    }
    focus(renderedTool, ev) {
        if (!renderedTool) {
            const focusableRTs = this.getFocusableTools();
            const lastFocusedRT = focusableRTs.find(rt => rt === this.focused.renderedTool) || focusableRTs[0];
            // guard against only disabled tools
            if (lastFocusedRT) {
                this.focused.renderedTool = lastFocusedRT;
                this.focused.index = this.getFocusableTools().findIndex(rt => rt === lastFocusedRT);
                // if event is undefined, then this means that the tool is the first one in the overflow popup
                lastFocusedRT.tool.focus(ev);
            }
        }
        else if (renderedTool.tool.canFocus && renderedTool.tool.canFocus()) {
            this.focused.renderedTool = renderedTool;
            this.focused.index = this.getFocusableTools().findIndex(rt => rt === renderedTool);
            renderedTool.tool.focus(ev);
            this.blurOverflowButton();
        }
    }
    blurOverflowButton() {
        if (this.overflowButton) {
            this.isOverflowButtonFocused = false;
            this.overflowButton.nativeElement.tabIndex = -1;
        }
    }
    focusOverflowButton() {
        this.isOverflowButtonFocused = true;
        this.overflowButton.nativeElement.tabIndex = 0;
        this.overflowButton.nativeElement.focus();
    }
    isOverflowButtonVisible() {
        return (isPresent(this.overflowButton) &&
            window.getComputedStyle(this.overflowButton.nativeElement).getPropertyValue('visibility') === 'visible');
    }
}
NavigationService.decorators = [
    { type: Injectable },
];

/**
 * Represents the Base ToolBar Tool component for Angular.
 * Extend this class to create custom tools.
 */
class ToolBarToolComponent {
    constructor() {
        this.tabIndex = -1; //Focus movement inside the toolbar is managed using roving tabindex.
        this.overflows = true;
        // this should be replaced with showTool: DisplayMode = 'both';
        /**
         * @hidden
         */
        this.responsive = true;
    }
    get toolbarDisplay() {
        return this.overflows ? 'none' : 'inline-block';
    }
    get overflowDisplay() {
        return this.overflows ? 'block' : 'none';
    }
    /**
     * Determines if the tool can be focused.
     * If the returned value is `false`, the tool will not be part of the keyboard navigation.
     * @returns `true` if the tool should take part in keyboard navigation.
     */
    canFocus() {
        return false;
    }
    /**
     * Called when the tool is focused.
     * The method accepts as argument the original browser event, which can be a `KeyboardEvent`, `MouseEvent` or `FocusEvent`.
     * @param {Event} ev - This is the event that caused the tool to be focused.
     */
    // @ts-ignore
    focus(ev) {
        /* noop */
    }
    /**
     * Called when the tool is focused and one of the arrow keys is pressed.
     * The returned boolean value determines whether the `ToolBarComponent` will move the focus to the next/previous `ToolBarToolComponent`
     * ([see example]({% slug customcontroltypes_toolbar %}#toc-adding-keyboard-navigation)).
     * @param {KeyboardEvent} ev - The last pressed arrow key
     * @returns
     */
    // @ts-ignore
    handleKey(ev) {
        return false;
    }
}
ToolBarToolComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'toolbar-tool',
                template: ``
            },] },
];
ToolBarToolComponent.propDecorators = {
    responsive: [{ type: Input }]
};

/**
 * @hidden
 */
class PreventableEvent {
    constructor() {
        this.prevented = false;
    }
    /**
     * Prevents the default action for a specified event.
     * In this way, the source component suppresses the built-in behavior that follows the event.
     */
    preventDefault() {
        this.prevented = true;
    }
    /**
     * If the event is prevented by any of its subscribers, returns `true`.
     *
     * @returns `true` if the default action was prevented. Otherwise, returns `false`.
     */
    isDefaultPrevented() {
        return this.prevented;
    }
}

/**
 * @hidden
 */
const defaultPopupWidth = '150px';

const getInitialPopupSettings = (isRtl) => ({
    animate: true,
    anchorAlign: { horizontal: isRtl ? 'left' : 'right', vertical: 'bottom' },
    popupAlign: { horizontal: isRtl ? 'left' : 'right', vertical: 'top' }
});
/**
 * Represents the [Kendo UI ToolBar component for Angular]({% slug overview_toolbar %}).
 */
class ToolBarComponent {
    constructor(localization, popupService, refreshService, navigationService, element, cdr, zone, renderer) {
        this.localization = localization;
        this.popupService = popupService;
        this.refreshService = refreshService;
        this.navigationService = navigationService;
        this.element = element;
        this.cdr = cdr;
        this.zone = zone;
        this.renderer = renderer;
        /**
         * Hides the overflowing tools in a popup.
         */
        this.overflow = false;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the ToolBar.
         */
        this.tabindex = 0;
        /**
         * Fires when the overflow popup of the ToolBar is opened.
         */
        this.open = new EventEmitter();
        /**
         * Fires when the overflow popup of the ToolBar is closed.
         */
        this.close = new EventEmitter();
        this.hostClasses = true;
        this.cancelRenderedToolsSubscription$ = new Subject();
        this.direction = localization.rtl ? 'rtl' : 'ltr';
    }
    /**
     * @hidden
     */
    set resizable(value) {
        this.overflow = value;
    }
    get resizable() {
        return this.overflow;
    }
    /**
     * Configures the popup of the ToolBar drop-down list.
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     */
    set popupSettings(settings) {
        this._popupSettings = Object.assign({}, getInitialPopupSettings(this.localization.rtl), settings);
    }
    get popupSettings() {
        return this._popupSettings || getInitialPopupSettings(this.localization.rtl);
    }
    /**
     * @hidden
     */
    set tabIndex(tabIndex) {
        this.tabindex = tabIndex;
    }
    get tabIndex() {
        return this.tabindex;
    }
    get appendTo() {
        const { appendTo } = this.popupSettings;
        if (!appendTo || appendTo === 'root') {
            return undefined;
        }
        return appendTo === 'component' ? this.container : appendTo;
    }
    set popupOpen(open) {
        if (this.popupOpen === open) {
            return;
        }
        const eventArgs = new PreventableEvent();
        if (open) {
            this.open.emit(eventArgs);
        }
        else {
            this.close.emit(eventArgs);
        }
        if (eventArgs.isDefaultPrevented()) {
            return;
        }
        this.toggle(open);
    }
    get popupOpen() {
        return this._open;
    }
    /**
     * @hidden
     */
    onFocus(ev) {
        this.navigationService.resetNavigation();
        this.navigationService.focusFirst(ev);
        this.tabIndex = -1;
    }
    /**
     * @hidden
     */
    onFocusOut() {
        this.tabIndex = 0;
    }
    get getTabIndex() {
        return this.tabindex;
    }
    get getRole() {
        return 'toolbar';
    }
    get getDir() {
        return this.direction;
    }
    get resizableClass() {
        return this.overflow;
    }
    ngAfterViewInit() {
        this.zone.runOutsideAngular(() => {
            this.toolbarKeydownListener = this.renderer.listen(this.element.nativeElement, 'keydown', (ev) => {
                switch (ev.keyCode) {
                    case Keys.ArrowLeft:
                        this.zone.run(() => {
                            ev.preventDefault();
                            this.direction === 'ltr' ? this.navigationService.focusPrev(ev) : this.navigationService.focusNext(ev);
                            this.tabIndex = -1;
                        });
                        break;
                    case Keys.ArrowRight:
                        this.zone.run(() => {
                            ev.preventDefault();
                            this.direction === 'ltr' ? this.navigationService.focusNext(ev) : this.navigationService.focusPrev(ev);
                            this.tabIndex = -1;
                        });
                        break;
                    case Keys.Tab:
                        this.zone.run(() => this.navigationService.resetNavigation());
                        break;
                    case Keys.Escape:
                        this.zone.run(() => this.toggle(false));
                        break;
                    default:
                        break;
                }
            });
        });
        if (this.overflow) {
            this.resizeSubscription = this.resizeSensor.resize.pipe(filter(() => this.overflow)).subscribe(() => {
                this.onResize();
            });
            // because of https://github.com/telerik/kendo-angular-buttons/pull/276
            this.zone.runOutsideAngular(() => setTimeout(() => this.onResize()));
            this.navigationService.overflowButton = this.overflowButton;
        }
        this.navigationService.setRenderedTools(this.renderedTools.toArray());
        this.renderedTools.changes
            .pipe(takeUntil(this.cancelRenderedToolsSubscription$))
            .subscribe((rts) => this.navigationService.setRenderedTools(rts.toArray()));
    }
    ngOnInit() {
        this.localizationChangesSubscription = this.localization.changes.subscribe(({ rtl }) => (this.direction = rtl ? 'rtl' : 'ltr'));
        if (isDocumentAvailable()) {
            this.zone.runOutsideAngular(() => (this.closeOverflowSubscription = fromEvent(document, 'click')
                .pipe(filter(() => !!this.popupRef), filter((ev) => !this.popupRef.popup.instance.container.nativeElement.contains(ev.target)), filter((ev) => !this.overflowButton.nativeElement.contains(ev.target)))
                .subscribe(() => {
                this.zone.run(() => {
                    this.popupOpen = false;
                });
            })));
        }
    }
    ngOnDestroy() {
        if (this.resizeSubscription) {
            this.resizeSubscription.unsubscribe();
        }
        if (this.localizationChangesSubscription) {
            this.localizationChangesSubscription.unsubscribe();
        }
        if (this.closeOverflowSubscription) {
            this.closeOverflowSubscription.unsubscribe();
        }
        if (this.popupRef) {
            this.popupRef.close();
        }
        if (this.toolbarKeydownListener) {
            this.toolbarKeydownListener();
        }
        this.cancelRenderedToolsSubscription$.next();
    }
    /**
     * @hidden
     */
    onRendererClick(data) {
        this.navigationService.click(data);
        this.tabIndex = -1;
    }
    /**
     * @hidden
     */
    showPopup() {
        this.popupOpen = !this.popupOpen;
        this.navigationService.click({ context: undefined, event: undefined });
    }
    /**
     * Toggles the visibility of the overflow popup.
     */
    toggle(popupOpen) {
        this._open = popupOpen !== undefined ? popupOpen : !this.popupOpen;
        if (this.popupRef) {
            this.popupRef.close();
            this.popupRef = null;
        }
        if (this.popupOpen) {
            this.popupRef = this.popupService.open({
                anchor: this.overflowButton,
                anchorAlign: this.popupSettings.anchorAlign,
                popupAlign: this.popupSettings.popupAlign,
                content: this.popupTemplate,
                appendTo: this.appendTo,
                animate: this.popupSettings.animate,
                popupClass: this.popupSettings.popupClass,
                positionMode: 'absolute'
            });
            this.setPopupContentDimensions();
            this.popupRef.popupOpen.subscribe(this.onPopupOpen.bind(this));
            this.popupRef.popupClose.subscribe(this.onPopupClose.bind(this));
        }
    }
    /**
     * @hidden
     */
    onResize() {
        if (isDocumentAvailable()) {
            const containerWidth = innerWidth(this.element.nativeElement) - this.overflowAnchorWidth;
            this.shrink(containerWidth, this.childrenWidth);
            this.stretch(containerWidth, this.childrenWidth);
        }
        this.cdr.detectChanges();
        this.resizeSensor.acceptSize();
    }
    /**
     * @hidden
     */
    onPopupOpen() {
        this.zone.runOutsideAngular(() => {
            this.overflowKeydownListener = this.renderer.listen(this.popupRef.popupElement, 'keydown', (ev) => {
                switch (ev.keyCode) {
                    case Keys.ArrowUp:
                        this.zone.run(() => {
                            ev.preventDefault();
                            this.navigationService.focusPrev(ev);
                        });
                        break;
                    case Keys.ArrowDown:
                        this.zone.run(() => {
                            ev.preventDefault();
                            this.navigationService.focusNext(ev);
                        });
                        break;
                    case Keys.Escape:
                        this.zone.run(() => this.toggle(false));
                        break;
                    case Keys.Tab:
                        this.zone.run(() => {
                            this.toggle(false);
                            this.navigationService.resetNavigation();
                        });
                        break;
                    default:
                        break;
                }
            });
        });
        this.cancelRenderedToolsSubscription$.next();
        this.navigationService.moveFocusToPopup();
        this.navigationService.setRenderedTools(this.overflowRenderedTools.toArray());
        this.overflowRenderedTools.changes
            .pipe(takeUntil(this.cancelRenderedToolsSubscription$))
            .subscribe((rts) => this.navigationService.setRenderedTools(rts.toArray()));
    }
    /**
     * @hidden
     */
    onPopupClose() {
        this.cancelRenderedToolsSubscription$.next();
        this.navigationService.setRenderedTools(this.renderedTools.toArray());
        this.renderedTools.changes
            .pipe(takeUntil(this.cancelRenderedToolsSubscription$))
            .subscribe((rts) => this.navigationService.setRenderedTools(rts.toArray()));
        this.navigationService.moveFocusToToolBar();
        if (this.overflowKeydownListener) {
            this.overflowKeydownListener();
        }
    }
    get displayAnchor() {
        return this.allTools.filter(t => t.overflows && t.responsive).length > 0 ? 'visible' : 'hidden';
    }
    get popupWidth() {
        if (!this.popupSettings || !this.popupSettings.width) {
            return defaultPopupWidth;
        }
        return isNaN(this.popupSettings.width) ? this.popupSettings.width : `${this.popupSettings.width}px`;
    }
    get popupHeight() {
        if (!this.popupSettings || !this.popupSettings.height) {
            return;
        }
        return isNaN(this.popupSettings.height) ? this.popupSettings.height : `${this.popupSettings.height}px`;
    }
    get overflowAnchorWidth() {
        if (!this.overflow) {
            return 0;
        }
        if (!this.cachedOverflowAnchorWidth) {
            this.cachedOverflowAnchorWidth = outerWidth(this.overflowButton.nativeElement);
        }
        return this.cachedOverflowAnchorWidth;
    }
    get childrenWidth() {
        const width = this.renderedTools.reduce((totalWidth, tool) => tool.width + totalWidth, 0);
        return Math.ceil(width);
    }
    get visibleTools() {
        return this.allTools.filter((tool) => {
            return tool.overflows === false;
        });
    }
    get overflowTools() {
        return this.allTools.filter((tool) => {
            return tool.overflows === true;
        });
    }
    shrink(containerWidth, childrenWidth) {
        let width;
        if (containerWidth < childrenWidth) {
            for (var i = this.visibleTools.length - 1; i >= 0; i--) {
                if (containerWidth > childrenWidth) {
                    break;
                }
                else {
                    width = this.hideLastVisibleTool();
                    childrenWidth -= width;
                }
            }
        }
    }
    stretch(containerWidth, childrenWidth) {
        let width;
        if (containerWidth > childrenWidth) {
            for (var i = this.overflowTools.length - 1; i >= 0; i--) {
                width = this.showFirstHiddenTool(containerWidth, childrenWidth);
                if (width) {
                    childrenWidth += width;
                }
                else {
                    break;
                }
            }
        }
    }
    hideLastVisibleTool() {
        const tool = this.visibleTools[this.visibleTools.length - 1];
        const renderedElement = this.renderedTools.find((r) => {
            return r.tool === tool;
        });
        const width = renderedElement.width;
        tool.overflows = true;
        this.refreshService.refresh(tool);
        return width;
    }
    showFirstHiddenTool(containerWidth, childrenWidth) {
        const tool = this.overflowTools[0];
        const renderedElement = this.renderedTools.find(r => r.tool === tool);
        tool.overflows = false;
        tool.visibility = 'hidden';
        this.refreshService.refresh(tool);
        if (containerWidth > childrenWidth + renderedElement.width) {
            tool.visibility = 'visible';
            this.refreshService.refresh(tool);
        }
        else {
            tool.overflows = true;
            this.refreshService.refresh(tool);
        }
        return renderedElement.width; // returns 0 if `overflows` is true
    }
    setPopupContentDimensions() {
        const popupContentContainer = this.popupRef.popup.instance.contentContainer.nativeElement;
        popupContentContainer.style.width = this.popupWidth;
        popupContentContainer.style.height = this.popupHeight;
        popupContentContainer.style.overflow = 'auto';
    }
}
ToolBarComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'kendoToolBar',
                providers: [
                    RefreshService,
                    NavigationService,
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.toolbar'
                    }
                ],
                selector: 'kendo-toolbar',
                template: `
        <ng-container *ngFor="let tool of allTools; let index = index">
            <kendo-toolbar-renderer
                #toolbarRenderer
                (rendererClick)="onRendererClick($event)"
                [location]="'toolbar'"
                [resizable]="overflow"
                [tool]="tool"
            ></kendo-toolbar-renderer>
        </ng-container>
        <button
            #overflowButton
            type="button"
            tabindex="-1"
            *ngIf="overflow"
            [style.visibility]="displayAnchor"
            class="k-overflow-anchor k-button"
            (click)="showPopup()"
        >
            <span class="k-icon k-i-more-vertical"></span>
        </button>
        <ng-template #popupTemplate>
            <ul class="k-overflow-container k-list-container k-reset">
                <ng-container *ngFor="let tool of allTools; let index = index">
                    <li class="k-item">
                        <kendo-toolbar-renderer
                            #overflowRenderer
                            (rendererClick)="onRendererClick($event)"
                            [location]="'overflow'"
                            [resizable]="overflow"
                            [tool]="tool"
                        ></kendo-toolbar-renderer>
                    </li>
                </ng-container>
            </ul>
        </ng-template>
        <ng-container #container></ng-container>
        <kendo-resize-sensor *ngIf="overflow" [rateLimit]="1000" #resizeSensor></kendo-resize-sensor>
    `
            },] },
];
/** @nocollapse */
ToolBarComponent.ctorParameters = () => [
    { type: LocalizationService },
    { type: PopupService },
    { type: RefreshService },
    { type: NavigationService },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: NgZone },
    { type: Renderer2 }
];
ToolBarComponent.propDecorators = {
    overflow: [{ type: Input }],
    resizable: [{ type: Input }],
    popupSettings: [{ type: Input }],
    tabindex: [{ type: Input }],
    tabIndex: [{ type: Input, args: ['tabIndex',] }],
    open: [{ type: Output }],
    close: [{ type: Output }],
    allTools: [{ type: ContentChildren, args: [ToolBarToolComponent,] }],
    overflowButton: [{ type: ViewChild, args: ['overflowButton',] }],
    popupTemplate: [{ type: ViewChild, args: ['popupTemplate', { static: true },] }],
    resizeSensor: [{ type: ViewChild, args: ['resizeSensor',] }],
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    renderedTools: [{ type: ViewChildren, args: ['toolbarRenderer',] }],
    overflowRenderedTools: [{ type: ViewChildren, args: ['overflowRenderer',] }],
    hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-toolbar',] }],
    onFocus: [{ type: HostListener, args: ['focus', ['$event'],] }],
    onFocusOut: [{ type: HostListener, args: ['focusout',] }],
    getTabIndex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    getRole: [{ type: HostBinding, args: ['attr.role',] }],
    getDir: [{ type: HostBinding, args: ['attr.dir',] }],
    resizableClass: [{ type: HostBinding, args: ['class.k-toolbar-resizable',] }]
};

/**
 * Represents the [Kendo UI ToolBar Button tool for Angular]({% slug controltypes_toolbar %}#toc-buttons).
 */
class ToolBarButtonComponent extends ToolBarToolComponent {
    constructor() {
        super();
        // showText and showIcon showIcon should be declared first
        /**
         * Specifies where button text should be displayed
         */
        this.showText = 'both';
        /**
         * Specifies where button icon should be displayed
         */
        this.showIcon = 'both';
        /**
         * Provides visual styling that indicates if the Button is active
         * ([see example]({% slug controltypes_toolbar %}#toc-toggle-buttons)).
         * By default, `toggleable` is set to `false`.
         */
        this.toggleable = false;
        /**
         * Adds visual weight to the Button and makes it primary
         * ([see example]({% slug controltypes_toolbar %}#toc-buttons)).
         */
        this.primary = false;
        /**
         * Changes the visual appearance by using alternative styling options
         * ([see example]({% slug controltypes_toolbar %}#toc-buttons)).
         *
         * The available values are:
         * * `bare`
         * * `flat`
         * * `outline`
         */
        this.look = 'default';
        /**
         * Sets the selected state of the Button.
         */
        this.selected = false;
        /**
         * Fires each time the Button is clicked.
         */
        this.click = new EventEmitter();
        /**
         * Fires each time the selected state of a Toggle Button is changed.
         * The event argument is the new selected state (Boolean).
         */
        this.selectedChange = new EventEmitter();
        this.toolbarOptions = {
            text: '',
            icon: '',
            iconClass: '',
            imageUrl: ''
        };
        this.overflowOptions = {
            text: '',
            icon: '',
            iconClass: '',
            imageUrl: ''
        };
    }
    /**
     * Specifies the text of the Button ([see example]({% slug controltypes_toolbar %}#toc-buttons)).
     */
    set text(text) {
        this.toolbarOptions.text = getValueForLocation(text, this.showText, false);
        this.overflowOptions.text = getValueForLocation(text, this.showText, true);
    }
    /**
     * @hidden
     */
    get togglable() {
        return this.toggleable;
    }
    set togglable(value) {
        this.toggleable = value;
    }
    /**
     * Defines the name for an existing icon in a Kendo UI theme
     * ([see example]({% slug controltypes_toolbar %}#toc-buttons)).
     * The icon is rendered inside the Button by a `span.k-icon` element.
     */
    set icon(icon) {
        this.toolbarOptions.icon = getValueForLocation(icon, this.showIcon, false);
        this.overflowOptions.icon = getValueForLocation(icon, this.showIcon, true);
    }
    /**
     * Defines a CSS class&mdash;or multiple classes separated by spaces&mdash;
     * which are applied to a `span` element inside the Button. Allows the usage of custom icons.
     */
    set iconClass(iconClass) {
        this.toolbarOptions.iconClass = getValueForLocation(iconClass, this.showIcon, false);
        this.overflowOptions.iconClass = getValueForLocation(iconClass, this.showIcon, true);
    }
    /**
     * Defines a URL which is used for an `img` element inside the Button.
     * The URL can be relative or absolute. If relative, it is evaluated with relation to the web page URL.
     */
    set imageUrl(imageUrl) {
        this.toolbarOptions.imageUrl = getValueForLocation(imageUrl, this.showIcon, false);
        this.overflowOptions.imageUrl = getValueForLocation(imageUrl, this.showIcon, true);
    }
    /**
     * @hidden
     */
    onBlur() {
        this.getButton().tabIndex = -1;
    }
    /**
     * @hidden
     */
    canFocus() {
        return !this.disabled;
    }
    /**
     * @hidden
     */
    focus(ev) {
        // guard against focusing twice on mousedown.
        if (!ev || ev.type === 'focus' || ev.type === 'keydown') {
            this.getButton().focus();
        }
        this.getButton().tabIndex = 0;
    }
    /**
     * @hidden
     */
    handleKey() {
        this.getButton().tabIndex = -1;
        return false;
    }
    getButton() {
        return (this.overflows ? this.overflowButtonElement : this.toolbarButtonElement).nativeElement;
    }
}
ToolBarButtonComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'kendoToolBarButton',
                // tslint:disable-next-line:no-forward-ref
                providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => ToolBarButtonComponent) }],
                selector: 'kendo-toolbar-button',
                template: `
        <ng-template #toolbarTemplate>
            <button
                #toolbarButton
                [tabindex]="tabIndex"
                type="button"
                kendoButton
                [ngStyle]="style"
                [ngClass]="className"
                [attr.title]="title"
                [disabled]="disabled"
                [toggleable]="toggleable"
                [primary]="primary"
                [selected]="selected"
                [icon]="toolbarOptions.icon"
                [iconClass]="toolbarOptions.iconClass"
                [imageUrl]="toolbarOptions.imageUrl"
                [look]="look"
                (click)="click.emit($event)"
                (selectedChange)="selectedChange.emit($event)"
                (blur)="onBlur()"
            >
                {{ toolbarOptions.text }}
            </button>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                #overflowButton
                tabindex="-1"
                type="button"
                kendoButton
                class="k-overflow-button"
                [ngStyle]="style"
                [ngClass]="className"
                [attr.title]="title"
                [disabled]="disabled"
                [toggleable]="toggleable"
                [primary]="primary"
                [selected]="selected"
                [icon]="overflowOptions.icon"
                [iconClass]="overflowOptions.iconClass"
                [imageUrl]="overflowOptions.imageUrl"
                [look]="look"
                (click)="click.emit($event)"
                (selectedChange)="selectedChange.emit($event)"
            >
                {{ overflowOptions.text }}
            </button>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
ToolBarButtonComponent.ctorParameters = () => [];
ToolBarButtonComponent.propDecorators = {
    showText: [{ type: Input }],
    showIcon: [{ type: Input }],
    text: [{ type: Input }],
    style: [{ type: Input }],
    className: [{ type: Input }],
    title: [{ type: Input }],
    disabled: [{ type: Input }],
    toggleable: [{ type: Input }],
    togglable: [{ type: Input }],
    primary: [{ type: Input }],
    look: [{ type: Input }],
    selected: [{ type: Input }],
    icon: [{ type: Input }],
    iconClass: [{ type: Input }],
    imageUrl: [{ type: Input }],
    click: [{ type: Output }],
    selectedChange: [{ type: Output }],
    toolbarTemplate: [{ type: ViewChild, args: ['toolbarTemplate', { static: true },] }],
    popupTemplate: [{ type: ViewChild, args: ['popupTemplate', { static: true },] }],
    toolbarButtonElement: [{ type: ViewChild, args: ['toolbarButton', { read: ElementRef },] }],
    overflowButtonElement: [{ type: ViewChild, args: ['overflowButton', { read: ElementRef },] }]
};

/**
 * Represents the Kendo UI Toolbar ButtonGroup for Angular.
 */
class ToolBarButtonGroupComponent extends ToolBarToolComponent {
    constructor(localization) {
        super();
        this.localization = localization;
        /**
         * By default, the selection mode of the ButtonGroup is set to `multiple`.
         */
        this.selection = 'multiple';
        /**
         * Changes the visual appearance by using alternative styling options.
         * The `look` property of the ButtonGroup takes precedence over the `look` property
         * of the individual buttons that are part of the group.
         *
         * The available values are:
         * * `bare`
         * * `flat`
         * * `outline`
         */
        this.look = 'default';
        this.focusedIndex = -1;
        this.getNextKey = getNextKey(this.localization.rtl);
        this.getPrevKey = getPrevKey(this.localization.rtl);
    }
    get buttonElements() {
        return this.getButtonGroup()
            .buttons.filter(b => !b.isDisabled)
            .map(b => b.element);
    }
    /**
     * @hidden
     */
    onFocus() {
        // triggered on tabin
        this.focusedIndex = 0;
    }
    /**
     * @hidden
     */
    onNavigate(ev) {
        ev.preventDefault();
    }
    /**
     * @hidden
     */
    selectedChangeHandler(state, button) {
        button.selected = state;
        button.selectedChange.emit(state);
    }
    /**
     * @hidden
     */
    onButtonClick(ev) {
        this.focusedIndex = this.buttonElements.findIndex(be => be === ev.target || be.contains(ev.target));
        this.focusButton(this.focusedIndex, ev);
    }
    /**
     * @hidden
     */
    canFocus() {
        return !(this.disabled || this.buttonElements.length === 0);
    }
    /**
     * @hidden
     */
    focus(ev = {}) {
        const nextKey = this.getNextKey(this.overflows);
        const prevKey = this.getPrevKey(this.overflows);
        this.focusedIndex = getIndexOfFocused(prevKey, nextKey, this.buttonElements)(ev);
        this.focusButton(this.focusedIndex, ev);
    }
    /**
     * @hidden
     */
    handleKey(ev) {
        const nextKey = this.getNextKey(this.overflows);
        const prevKey = this.getPrevKey(this.overflows);
        const peekAtIndex = makePeeker(this.buttonElements);
        const isUnmodified = areEqual(this.focusedIndex);
        this.focusedIndex = seekFocusedIndex(prevKey, nextKey, peekAtIndex)(this.focusedIndex, ev);
        this.focusButton(this.focusedIndex, ev);
        return !isUnmodified(this.focusedIndex);
    }
    getButtonGroup() {
        return this.overflows ? this.overflowButtonGroup : this.toolbarButtonGroup;
    }
    focusButton(index, ev) {
        // Guard against focusing twice on mousedown.
        if (!ev.type || ev.type === 'focus' || ev.type === 'keydown') {
            this.buttonElements[index].focus();
        }
    }
}
ToolBarButtonGroupComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'kendoToolBarButtonGroup',
                // tslint:disable-next-line:no-forward-ref
                providers: [LocalizationService, { provide: ToolBarToolComponent, useExisting: forwardRef(() => ToolBarButtonGroupComponent) }],
                selector: 'kendo-toolbar-buttongroup',
                template: `
        <ng-template #toolbarTemplate>
            <kendo-buttongroup
                #toolbarButtonGroup
                [tabIndex]="-1"
                [selection]="selection"
                [disabled]="disabled"
                [look]="look"
                [width]="width"
                (navigate)="onNavigate($event)"
                (focus)="onFocus()"
            >
                <span
                    kendoButton
                    *ngFor="let button of buttonComponents"
                    [ngStyle]="button.style"
                    [ngClass]="button.className"
                    [attr.title]="button.title"
                    [disabled]="button.disabled"
                    [togglable]="button.togglable"
                    [primary]="button.primary"
                    [selected]="button.selected"
                    [icon]="button.toolbarOptions.icon"
                    [iconClass]="button.toolbarOptions.iconClass"
                    [imageUrl]="button.toolbarOptions.imageUrl"
                    (click)="button.click.emit($event); onButtonClick($event)"
                    (selectedChange)="selectedChangeHandler($event, button)"
                >
                    {{ button.toolbarOptions.text }}
                </span>
            </kendo-buttongroup>
        </ng-template>
        <ng-template #popupTemplate>
            <kendo-buttongroup
                #overflowButtonGroup
                class="k-overflow-button"
                [tabIndex]="-1"
                [selection]="selection"
                [disabled]="disabled"
                [look]="look"
                [width]="width"
            >
                <span
                    kendoButton
                    class="k-overflow-button"
                    *ngFor="let button of buttonComponents"
                    [ngStyle]="button.style"
                    [ngClass]="button.className"
                    [attr.title]="button.title"
                    [disabled]="button.disabled"
                    [togglable]="button.togglable"
                    [primary]="button.primary"
                    [selected]="button.selected"
                    [icon]="button.overflowOptions.icon"
                    [iconClass]="button.overflowOptions.iconClass"
                    [imageUrl]="button.overflowOptions.imageUrl"
                    (click)="button.click.emit($event); onButtonClick($event)"
                    (selectedChange)="selectedChangeHandler($event, button)"
                >
                    {{ button.overflowOptions.text }}
                </span>
            </kendo-buttongroup>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
ToolBarButtonGroupComponent.ctorParameters = () => [
    { type: LocalizationService }
];
ToolBarButtonGroupComponent.propDecorators = {
    disabled: [{ type: Input }],
    selection: [{ type: Input }],
    width: [{ type: Input }],
    look: [{ type: Input }],
    toolbarTemplate: [{ type: ViewChild, args: ['toolbarTemplate', { static: true },] }],
    popupTemplate: [{ type: ViewChild, args: ['popupTemplate', { static: true },] }],
    buttonComponents: [{ type: ContentChildren, args: [forwardRef(() => ToolBarButtonComponent),] }],
    toolbarButtonGroup: [{ type: ViewChild, args: ['toolbarButtonGroup',] }],
    overflowButtonGroup: [{ type: ViewChild, args: ['overflowButtonGroup',] }]
};

/**
 * @hidden
 */
class ToolBarButtonListComponent {
    constructor() {
        this.disabled = false;
        this.look = 'default';
        this.itemClick = new EventEmitter();
    }
    getText(dataItem) {
        if (dataItem) {
            return this.textField ? dataItem[this.textField] : dataItem.text || dataItem;
        }
        return undefined;
    }
    onClick(item, index) {
        const dataItem = this.data[index];
        if (item.click) {
            item.click(dataItem);
        }
        this.itemClick.emit(dataItem);
    }
}
ToolBarButtonListComponent.decorators = [
    { type: Component, args: [{
                selector: 'kendo-toolbar-buttonlist',
                template: `
        <button
            #button
            type="button"
            tabindex="-1"
            kendoButton
            style="padding-left: 16px"
            class="k-overflow-button"
            *ngFor="let item of data; let i = index"
            [disabled]="disabled || item.disabled"
            [icon]="item.icon"
            [iconClass]="item.iconClass"
            [imageUrl]="item.imageUrl"
            [look]="look"
            (click)="onClick(item, i)"
        >
            {{ getText(item) }}
        </button>
    `
            },] },
];
ToolBarButtonListComponent.propDecorators = {
    data: [{ type: Input }],
    textField: [{ type: Input }],
    disabled: [{ type: Input }],
    look: [{ type: Input }],
    itemClick: [{ type: Output }],
    buttons: [{ type: ViewChildren, args: ['button',] }]
};

/**
 * Represents the [Kendo UI ToolBar DropDownButton for Angular]({% slug controltypes_toolbar %}#toc-dropdownbuttons).
 */
class ToolBarDropDownButtonComponent extends ToolBarToolComponent {
    constructor() {
        super();
        // showText and showIcon showIcon should be declared first
        /**
         * Defines the location of the button text that will be displayed.
         */
        this.showText = 'both';
        /**
         * Defines the location of the button icon that will be displayed.
         */
        this.showIcon = 'both';
        /**
         * Changes the visual appearance by using alternative styling options.
         * ([see example]({% slug controltypes_toolbar %}#toc-split-buttons)).
         *
         * The available values are:
         * * `flat`
         * * `outline`
         */
        this.look = 'default';
        /**
         * Adds visual weight to the default button and makes it primary.
         */
        this.primary = false;
        /**
         * Fires each time the user clicks a DropDownButton item.
         * The event data contains the data item that is bound to the clicked list item.
         */
        this.itemClick = new EventEmitter();
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel the event, the popup will remain closed.
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel the event, the popup will remain open.
         */
        this.close = new EventEmitter();
        this.toolbarOptions = {
            text: '',
            icon: '',
            iconClass: '',
            imageUrl: ''
        };
        this.overflowOptions = {
            text: '',
            icon: '',
            iconClass: '',
            imageUrl: ''
        };
        this._popupSettings = { animate: true, popupClass: '' };
        this.focusedIndex = -1;
        this.getNextKey = getNextKey();
        this.getPrevKey = getPrevKey();
    }
    /**
     * Sets the text of the DropDownButton
     * ([see example]({% slug controltypes_toolbar %}#toc-dropdownbuttons).
     */
    set text(text) {
        this.toolbarOptions.text = getValueForLocation(text, this.showText, false);
        this.overflowOptions.text = getValueForLocation(text, this.showText, true);
    }
    /**
     * Defines an icon that will be rendered next to the button text.
     */
    set icon(icon) {
        this.toolbarOptions.icon = getValueForLocation(icon, this.showIcon, false);
        this.overflowOptions.icon = getValueForLocation(icon, this.showIcon, true);
    }
    /**
     * Defines an icon with a custom CSS class that will be rendered next to the button text.
     */
    set iconClass(iconClass) {
        this.toolbarOptions.iconClass = getValueForLocation(iconClass, this.showIcon, false);
        this.overflowOptions.iconClass = getValueForLocation(iconClass, this.showIcon, true);
    }
    /**
     * Defines the location of an image that will be displayed next to the button text.
     */
    set imageUrl(imageUrl) {
        this.toolbarOptions.imageUrl = getValueForLocation(imageUrl, this.showIcon, false);
        this.overflowOptions.imageUrl = getValueForLocation(imageUrl, this.showIcon, true);
    }
    /**
     * Configures the popup of the DropDownButton.
     *
     * The available options are:
     * - `animate:Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `popupClass:String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     */
    set popupSettings(settings) {
        this._popupSettings = Object.assign({ animate: true, popupClass: '' }, settings);
    }
    get popupSettings() {
        return this._popupSettings;
    }
    /**
     * Sets the data of the DropDownButton
     * ([see example]({% slug controltypes_toolbar %}#toc-dropdownbuttons)).
     *
     * > The data has to be provided in an array-like list.
     */
    set data(data) {
        this._data = data || [];
    }
    get data() {
        if (!this._data) {
            this.data = [];
        }
        return this._data;
    }
    get overflowButtons() {
        return [...this.overflowDropDownButtonButtonList.buttons.toArray().filter(b => !b.nativeElement.disabled)];
    }
    /**
     * @hidden
     */
    onButtonListClick(ev) {
        this.focusedIndex = this.overflowDropDownButtonButtonList.buttons
            .toArray()
            .findIndex(b => b.nativeElement.contains(ev.target));
    }
    /**
     * @hidden
     */
    canFocus() {
        return !this.disabled;
    }
    /**
     * @hidden
     */
    focus(ev = {}) {
        if (!this.overflows) {
            if (ev.type === 'focus' || ev.type === 'keydown') {
                this.toolbarDropDownButton.focus();
            }
        }
        else if (this.overflowButtons.length > 0) {
            this.focusedIndex = getIndexOfFocused(this.getPrevKey(), this.getNextKey(), this.overflowButtons.map(ob => ob.nativeElement))(ev);
            this.focusButton(this.focusedIndex, ev);
        }
    }
    /**
     * @hidden
     */
    handleKey(ev) {
        if (!this.overflows && (ev.keyCode === this.getPrevKey(this.overflows) || ev.keyCode === this.getNextKey(this.overflows))) {
            return false;
        }
        if (this.overflows) {
            const peekAtIndex = makePeeker(this.overflowButtons);
            const isUnmodified = areEqual(this.focusedIndex);
            this.focusedIndex = seekFocusedIndex(this.getPrevKey(), this.getNextKey(), peekAtIndex)(this.focusedIndex, ev);
            this.focusButton(this.focusedIndex, ev);
            return !isUnmodified(this.focusedIndex);
        }
    }
    focusButton(index, ev) {
        if (!ev.type || ev.type === 'focus' || ev.type === 'keydown') {
            this.overflowButtons[index].nativeElement.focus();
        }
    }
}
ToolBarDropDownButtonComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'kendoToolBarDropDownButton',
                // tslint:disable-next-line:no-forward-ref
                providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => ToolBarDropDownButtonComponent) }],
                selector: 'kendo-toolbar-dropdownbutton',
                template: `
        <ng-template #toolbarTemplate>
            <kendo-dropdownbutton
                #toolbarDropDownButton
                [icon]="toolbarOptions.icon"
                [iconClass]="toolbarOptions.iconClass"
                [imageUrl]="toolbarOptions.imageUrl"
                [buttonClass]="buttonClass"
                [disabled]="disabled"
                [tabIndex]="-1"
                [data]="data"
                [textField]="textField"
                [popupSettings]="popupSettings"
                [look]="look"
                [primary]="primary"
                (open)="open.emit($event)"
                (close)="close.emit($event)"
                (itemClick)="itemClick.emit($event)"
            >
                {{ toolbarOptions.text }}
            </kendo-dropdownbutton>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                type="button"
                tabindex="-1"
                kendoButton
                class="k-overflow-button"
                [disabled]="true"
                [icon]="overflowOptions.icon"
                [iconClass]="overflowOptions.iconClass"
                [imageUrl]="overflowOptions.imageUrl"
                [ngClass]="buttonClass"
                (click)="itemClick.emit($event)"
            >
                {{ overflowOptions.text }}
            </button>
            <kendo-toolbar-buttonlist
                #overflowDropDownButtonButtonList
                [data]="data"
                [disabled]="disabled"
                [textField]="textField"
                (itemClick)="itemClick.emit($event)"
                (click)="onButtonListClick($event)"
            >
            </kendo-toolbar-buttonlist>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
ToolBarDropDownButtonComponent.ctorParameters = () => [];
ToolBarDropDownButtonComponent.propDecorators = {
    showText: [{ type: Input }],
    showIcon: [{ type: Input }],
    text: [{ type: Input }],
    icon: [{ type: Input }],
    iconClass: [{ type: Input }],
    imageUrl: [{ type: Input }],
    popupSettings: [{ type: Input }],
    buttonClass: [{ type: Input }],
    textField: [{ type: Input }],
    disabled: [{ type: Input }],
    look: [{ type: Input }],
    data: [{ type: Input }],
    primary: [{ type: Input }],
    itemClick: [{ type: Output }],
    open: [{ type: Output }],
    close: [{ type: Output }],
    toolbarTemplate: [{ type: ViewChild, args: ['toolbarTemplate', { static: true },] }],
    popupTemplate: [{ type: ViewChild, args: ['popupTemplate', { static: true },] }],
    dropdownButton: [{ type: ViewChild, args: ['dropdownButton', { read: ElementRef, static: true },] }],
    dropDownButtonComponent: [{ type: ViewChild, args: [DropDownButtonComponent, { static: false },] }],
    toolbarDropDownButton: [{ type: ViewChild, args: ['toolbarDropDownButton',] }],
    overflowDropDownButtonButtonList: [{ type: ViewChild, args: ['overflowDropDownButtonButtonList',] }]
};

/**
 * Represents the [Kendo UI ToolBar SplitButton for Angular]({% slug controltypes_toolbar %}#toc-splitbuttons).
 */
class ToolBarSplitButtonComponent extends ToolBarToolComponent {
    constructor() {
        super();
        // showText and showIcon showIcon should be declared first
        /**
         * Specifies where button text should be displayed
         */
        this.showText = 'both';
        /**
         * Specifies where button icon should be displayed
         */
        this.showIcon = 'both';
        /**
         * Changes the visual appearance by using alternative styling options
         * ([see example]({% slug controltypes_toolbar %}#toc-split-buttons)).
         *
         * The available values are:
         * * `default`
         * * `flat`
         * * `outline`
         */
        this.look = 'default';
        /**
         * Specifies the name of the [font icon]({% slug icons %}#toc-list-of-font-icons) that will
         * be rendered for the button which opens the popup.
         */
        this.arrowButtonIcon = 'arrow-s';
        /**
         * Configures the text field of the button-list popup.
         */
        this.textField = 'text';
        /**
         * Fires each time the user clicks the main button.
         */
        this.buttonClick = new EventEmitter();
        /**
         * Fires each time the user clicks the drop-down list.
         * The event data contains the data item that is bound to the clicked list item.
         */
        this.itemClick = new EventEmitter();
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel the event, the popup will remain closed.
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel the event, the popup will remain open.
         */
        this.close = new EventEmitter();
        this.toolbarOptions = {
            text: '',
            icon: '',
            iconClass: '',
            imageUrl: ''
        };
        this.overflowOptions = {
            text: '',
            icon: '',
            iconClass: '',
            imageUrl: ''
        };
        this._popupSettings = { animate: true, popupClass: '' };
        this.focusedIndex = -1;
        this.getNextKey = getNextKey();
        this.getPrevKey = getPrevKey();
    }
    /**
     * Sets the text of the SplitButton ([see example]({% slug controltypes_toolbar %}#toc-splitbuttons).
     */
    set text(text) {
        this.toolbarOptions.text = getValueForLocation(text, this.showText, false);
        this.overflowOptions.text = getValueForLocation(text, this.showText, true);
    }
    /**
     * Defines the icon that will be rendered next to the button text
     * ([see example]({% slug controltypes_toolbar %}#toc-splitbuttons)).
     */
    set icon(icon) {
        this.toolbarOptions.icon = getValueForLocation(icon, this.showIcon, false);
        this.overflowOptions.icon = getValueForLocation(icon, this.showIcon, true);
    }
    /**
     * Defines an icon with a custom CSS class that will be rendered next to the button text.
     */
    set iconClass(iconClass) {
        this.toolbarOptions.iconClass = getValueForLocation(iconClass, this.showIcon, false);
        this.overflowOptions.iconClass = getValueForLocation(iconClass, this.showIcon, true);
    }
    /**
     * Defines the location of an image that will be displayed next to the button text.
     */
    set imageUrl(imageUrl) {
        this.toolbarOptions.imageUrl = getValueForLocation(imageUrl, this.showIcon, false);
        this.overflowOptions.imageUrl = getValueForLocation(imageUrl, this.showIcon, true);
    }
    /**
     * Configures the popup of the SplitButton.
     *
     * The available options are:
     * - `animate:Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `popupClass:String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     */
    set popupSettings(value) {
        this._popupSettings = value;
    }
    get popupSettings() {
        if (!this._popupSettings) {
            this._popupSettings = { animate: true, popupClass: '' };
        }
        return this._popupSettings;
    }
    /**
     * Sets the data of the SplitButton ([see example]({% slug controltypes_toolbar %}#toc-splitbuttons)).
     *
     * > The data has to be provided in an array-like list.
     */
    set data(data) {
        this._data = data || [];
    }
    get data() {
        if (!this._data) {
            this.data = [];
        }
        return this._data;
    }
    get overflowButtons() {
        return [this.overflowSplitButton, ...this.overflowSplitButtonButtonList.buttons.toArray().filter(b => !b.nativeElement.disabled)];
    }
    /**
     * @hidden
     */
    onButtonListClick(ev) {
        this.focusedIndex = this.overflowButtons.findIndex(b => b.nativeElement.contains(ev.target));
    }
    /**
     * @hidden
     */
    onMainButtonClick(ev) {
        this.buttonClick.emit(ev);
        this.focusedIndex = 0;
    }
    /**
     * @hidden
     */
    canFocus() {
        return !this.disabled;
    }
    /**
     * @hidden
     */
    focus(ev = {}) {
        if (!this.overflows) {
            if (ev.type === 'focus' || ev.type === 'keydown') {
                this.toolbarSplitButton.focus();
            }
        }
        else if (this.overflowButtons.length > 0) {
            this.focusedIndex = getIndexOfFocused(this.getPrevKey(), this.getNextKey(), this.overflowButtons.map(ob => ob.nativeElement))(ev);
            this.focusButton(this.focusedIndex, ev);
        }
    }
    /**
     * @hidden
     */
    handleKey(ev) {
        if (!this.overflows && (ev.keyCode === this.getPrevKey(this.overflows) || ev.keyCode === this.getNextKey(this.overflows))) {
            return false;
        }
        if (this.overflows) {
            const peekAtIndex = makePeeker(this.overflowButtons);
            const isUnmodified = areEqual(this.focusedIndex);
            this.focusedIndex = seekFocusedIndex(this.getPrevKey(), this.getNextKey(), peekAtIndex)(this.focusedIndex, ev);
            this.focusButton(this.focusedIndex, ev);
            return !isUnmodified(this.focusedIndex);
        }
    }
    focusButton(index, ev) {
        if (!ev.type || ev.type === 'focus' || ev.type === 'keydown' || ev.type === 'click') {
            this.overflowButtons[index].nativeElement.focus();
        }
    }
}
ToolBarSplitButtonComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'kendoToolBarSplitButton',
                // tslint:disable-next-line:no-forward-ref
                providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => ToolBarSplitButtonComponent) }],
                selector: 'kendo-toolbar-splitbutton',
                template: `
        <ng-template #toolbarTemplate>
            <kendo-splitbutton
                #toolbarSplitButton
                [data]="data"
                [text]="toolbarOptions.text"
                [icon]="toolbarOptions.icon"
                [iconClass]="toolbarOptions.iconClass"
                [imageUrl]="toolbarOptions.imageUrl"
                [buttonClass]="buttonClass"
                [arrowButtonClass]="arrowButtonClass"
                [arrowButtonIcon]="arrowButtonIcon"
                [disabled]="disabled"
                [tabIndex]="-1"
                [textField]="textField"
                [popupSettings]="popupSettings"
                [look]="look"
                (buttonClick)="buttonClick.emit($event)"
                (open)="open.emit($event)"
                (close)="close.emit($event)"
                (itemClick)="itemClick.emit($event)"
            >
            </kendo-splitbutton>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                #overflowSplitButton
                type="button"
                tabindex="-1"
                kendoButton
                class="k-overflow-button"
                [disabled]="disabled"
                [icon]="overflowOptions.icon"
                [iconClass]="overflowOptions.iconClass"
                [imageUrl]="overflowOptions.imageUrl"
                [look]="look"
                [ngClass]="buttonClass"
                (click)="buttonClick.emit($event)"
                (click)="onMainButtonClick($event)"
            >
                {{ overflowOptions.text }}
            </button>
            <kendo-toolbar-buttonlist
                #overflowSplitButtonButtonList
                [look]="look"
                [data]="data"
                [disabled]="disabled"
                [textField]="textField"
                (itemClick)="itemClick.emit($event)"
                (click)="onButtonListClick($event)"
            >
            </kendo-toolbar-buttonlist>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
ToolBarSplitButtonComponent.ctorParameters = () => [];
ToolBarSplitButtonComponent.propDecorators = {
    showText: [{ type: Input }],
    showIcon: [{ type: Input }],
    text: [{ type: Input }],
    icon: [{ type: Input }],
    iconClass: [{ type: Input }],
    imageUrl: [{ type: Input }],
    disabled: [{ type: Input }],
    look: [{ type: Input }],
    popupSettings: [{ type: Input }],
    buttonClass: [{ type: Input }],
    arrowButtonClass: [{ type: Input }],
    arrowButtonIcon: [{ type: Input }],
    textField: [{ type: Input }],
    data: [{ type: Input }],
    buttonClick: [{ type: Output }],
    itemClick: [{ type: Output }],
    open: [{ type: Output }],
    close: [{ type: Output }],
    toolbarTemplate: [{ type: ViewChild, args: ['toolbarTemplate', { static: true },] }],
    popupTemplate: [{ type: ViewChild, args: ['popupTemplate', { static: true },] }],
    toolbarSplitButton: [{ type: ViewChild, args: ['toolbarSplitButton',] }],
    overflowSplitButton: [{ type: ViewChild, args: ['overflowSplitButton', { read: ElementRef },] }],
    overflowSplitButtonButtonList: [{ type: ViewChild, args: ['overflowSplitButtonButtonList',] }]
};

/**
 * Represents the [Kendo UI ToolBar Separator for Angular]({% slug controltypes_toolbar %}#toc-separators).
 */
class ToolBarSeparatorComponent extends ToolBarToolComponent {
    constructor() {
        super();
    }
    /**
     * @hidden
     */
    canFocus() {
        return false;
    }
    // If this is not here, the docs display info from its parent(ToolBarToolComponent).
    /**
     * @hidden
     */
    focus() {
        /* noop */
    }
    // If this is not here, the docs display info from its parent(ToolBarToolComponent).
    /**
     * @hidden
     */
    handleKey() {
        return false;
    }
    ngAfterViewInit() {
        if (!this.popupTemplate) {
            this.popupTemplate = this.toolbarTemplate;
        }
    }
}
ToolBarSeparatorComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'kendoToolBarSeparator',
                // tslint:disable-next-line:no-forward-ref
                providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => ToolBarSeparatorComponent) }],
                selector: 'kendo-toolbar-separator',
                template: `
        <ng-template #toolbarTemplate>
            <div class="k-separator"></div>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
ToolBarSeparatorComponent.ctorParameters = () => [];
ToolBarSeparatorComponent.propDecorators = {
    toolbarTemplate: [{ type: ViewChild, args: ['toolbarTemplate', { static: true },] }],
    popupTemplate: [{ type: ViewChild, args: ['popupTemplate', { static: true },] }],
    separator: [{ type: ViewChild, args: ['separator',] }]
};

/**
 * @hidden
 */
class RendererService {
    getElement() {
        return this.element.nativeElement;
    }
    querySelector(selector) {
        return this.element.nativeElement.querySelector(selector);
    }
    querySelectorAll(selector) {
        return this.element.nativeElement.querySelectorAll(selector);
    }
    findFocusable() {
        return findFocusable(this.element.nativeElement, false);
    }
    findFocusableChild(element) {
        if (!element) {
            element = this.findFocusable();
        }
        return findFocusableChild(element, false);
    }
    findNextFocusableSibling(element) {
        if (!element) {
            element = this.findFocusable();
        }
        return findFocusableSibling(element, false);
    }
    findPrevFocusableSibling(element) {
        if (!element) {
            element = this.findFocusable();
        }
        return findFocusableSibling(element, false, true);
    }
    setAttribute(element, attr, value) {
        this.renderer.setAttribute(element, attr, value);
    }
}
RendererService.decorators = [
    { type: Injectable },
];

/**
 * @hidden
 */
class ToolBarRendererComponent {
    constructor(element, renderer, rendererService, refreshService) {
        this.element = element;
        this.renderer = renderer;
        this.rendererService = rendererService;
        this.refreshService = refreshService;
        this.rendererClick = new EventEmitter();
        this.rendererService.element = element;
        this.rendererService.renderer = this;
        this.refreshSubscription = this.refreshService.onRefresh.subscribe((tool) => {
            if (this.tool === tool) {
                this.refresh();
            }
        });
    }
    onClick(ev) {
        this.rendererClick.emit({ context: this, event: ev });
    }
    ngOnInit() {
        if (this.resizable) {
            if (this.location === 'toolbar') {
                this.template = this.tool.toolbarTemplate;
                this.renderer.setStyle(this.element.nativeElement, 'visibility', 'hidden');
                this.renderer.setStyle(this.element.nativeElement, 'display', 'none');
            }
            else {
                this.template = this.tool.popupTemplate;
                this.renderer.setStyle(this.element.nativeElement, 'display', 'none');
            }
        }
        else {
            this.tool.overflows = false;
            this.template = this.tool.toolbarTemplate;
            this.renderer.setStyle(this.element.nativeElement, 'visibility', 'display');
            this.renderer.setStyle(this.element.nativeElement, 'display', 'inline-block');
        }
    }
    ngOnDestroy() {
        this.refreshSubscription.unsubscribe();
    }
    ngAfterViewInit() {
        if (this.resizable) {
            this.refresh();
        }
    }
    /**
     * @hidden
     */
    get width() {
        return this.tool.overflows ? 0 : outerWidth(this.element.nativeElement);
    }
    /**
     * @hidden
     */
    isDisplayed() {
        return this.element.nativeElement.style.display !== 'none';
    }
    /**
     * @hidden
     */
    refresh() {
        if (this.resizable) {
            if (this.location === 'toolbar') {
                this.renderer.setStyle(this.element.nativeElement, 'visibility', this.tool.visibility);
                this.renderer.setStyle(this.element.nativeElement, 'display', this.tool.toolbarDisplay);
            }
            else {
                this.renderer.setStyle(this.element.nativeElement, 'display', this.tool.overflowDisplay);
            }
        }
    }
    /**
     * @hidden
     */
    setAttribute(element, attr, value) {
        this.renderer.setAttribute(element, attr, value);
    }
}
ToolBarRendererComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'kendoToolBarRenderer',
                providers: [RendererService],
                selector: 'kendo-toolbar-renderer',
                template: `
        <ng-container *ngIf="location === 'toolbar'">
            <ng-template [ngTemplateOutlet]="template"></ng-template>
        </ng-container>
        <ng-container *ngIf="location === 'overflow' && tool.responsive">
            <ng-template [ngTemplateOutlet]="template"></ng-template>
        </ng-container>
    `
            },] },
];
/** @nocollapse */
ToolBarRendererComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: RendererService },
    { type: RefreshService }
];
ToolBarRendererComponent.propDecorators = {
    tool: [{ type: Input }],
    location: [{ type: Input }],
    resizable: [{ type: Input }],
    rendererClick: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};

const TOOLBAR_TOOLS = [
    ToolBarToolComponent,
    ToolBarButtonComponent,
    ToolBarButtonGroupComponent,
    ToolBarDropDownButtonComponent,
    ToolBarSplitButtonComponent,
    ToolBarSeparatorComponent
];
const TOOLBAR_COMMON = [
    ToolBarRendererComponent,
    ToolBarButtonListComponent
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }}) definition for the ToolBar component.
 *
 * The package exports:
 * - `ToolBarComponent`&mdash;The ToolBarComponent class.
 * - `ToolBarToolComponent`&mdash;The base Tool component class.
 * - `ToolBarButtonComponent`&mdash;The Button Tool component class.
 * - `ToolBarButtonGroupComponent`&mdash;The ButtonGroup Tool component class.
 * - `ToolBarDropDownButtonComponent`&mdash;The DropDownButton Tool component class.
 * - `ToolBarSplitButtonComponent`&mdash;The SplitButton Tool component class.
 * - `ToolBarSeparatorComponent`&mdash;The Separator Tool component class.
 */
class ToolBarModule {
}
ToolBarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ToolBarComponent, TOOLBAR_TOOLS, TOOLBAR_COMMON],
                exports: [ToolBarComponent, TOOLBAR_TOOLS],
                imports: [CommonModule, ButtonsModule, PopupModule, ResizeSensorModule]
            },] },
];

/**
 * Generated bundle index. Do not edit.
 */

export { NavigationService, RefreshService, ToolBarRendererComponent, RendererService, ToolBarButtonListComponent, ToolBarComponent, ToolBarToolComponent, ToolBarButtonComponent, ToolBarButtonGroupComponent, ToolBarDropDownButtonComponent, ToolBarSplitButtonComponent, ToolBarSeparatorComponent, ToolBarModule };
