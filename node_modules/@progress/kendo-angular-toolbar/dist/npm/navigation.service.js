/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var util_1 = require("./util");
/**
 * @hidden
 */
var NavigationService = /** @class */ (function () {
    function NavigationService() {
        this.focused = { renderedTool: null, index: -1 };
        this.renderedTools = [];
        this.isPopupFocused = false;
        this.isOverflowButtonFocused = false;
    }
    NavigationService.prototype.setRenderedTools = function (rts) {
        this.renderedTools = rts.slice();
    };
    NavigationService.prototype.click = function (_a) {
        var context = _a.context, ev = _a.event;
        if (this.focused.renderedTool !== context && ev) {
            this.focus(context, ev);
        }
    };
    NavigationService.prototype.moveFocusToToolBar = function () {
        this.isPopupFocused = false;
        this.focusOverflowButton();
    };
    NavigationService.prototype.moveFocusToPopup = function () {
        this.isPopupFocused = true;
        this.blurOverflowButton();
        this.focus();
    };
    NavigationService.prototype.focusNext = function (ev) {
        if (!this.isOverflowButtonFocused && this.focused.renderedTool && !this.focused.renderedTool.tool.handleKey(ev)) {
            var nextRT = this.getFocusableTools().slice(this.focused.index + 1)[0];
            if (nextRT) {
                this.focus(nextRT, ev);
            }
            else {
                if (this.isOverflowButtonVisible() && !this.isPopupFocused) {
                    this.focusOverflowButton();
                }
            }
        }
    };
    NavigationService.prototype.focusPrev = function (ev) {
        if (this.isOverflowButtonFocused) {
            var lastFocusableRT = this.getFocusableTools().reverse()[0];
            this.focus(lastFocusableRT, ev);
        }
        else if (this.focused.renderedTool && !this.focused.renderedTool.tool.handleKey(ev)) {
            var prevRT = this.getFocusableTools()
                .slice(0, this.focused.index)
                .reverse()[0];
            if (prevRT) {
                this.focus(prevRT, ev);
            }
        }
    };
    NavigationService.prototype.resetNavigation = function () {
        this.blurOverflowButton();
        this.focused.renderedTool = null;
        this.focused.index = -1;
    };
    NavigationService.prototype.focusFirst = function (ev) {
        var firstTool = this.getFocusableTools()[0];
        if (firstTool) {
            this.focused.renderedTool = firstTool;
            this.focused.index = this.getFocusableTools().findIndex(function (rt) { return rt === firstTool; });
            this.focus(firstTool, ev);
        }
    };
    NavigationService.prototype.getFocusableTools = function () {
        var _this = this;
        return this.renderedTools.filter(function (rt) { return rt.tool.overflows === _this.isPopupFocused && rt.tool.canFocus(); });
    };
    NavigationService.prototype.focus = function (renderedTool, ev) {
        var _this = this;
        if (!renderedTool) {
            var focusableRTs = this.getFocusableTools();
            var lastFocusedRT_1 = focusableRTs.find(function (rt) { return rt === _this.focused.renderedTool; }) || focusableRTs[0];
            // guard against only disabled tools
            if (lastFocusedRT_1) {
                this.focused.renderedTool = lastFocusedRT_1;
                this.focused.index = this.getFocusableTools().findIndex(function (rt) { return rt === lastFocusedRT_1; });
                // if event is undefined, then this means that the tool is the first one in the overflow popup
                lastFocusedRT_1.tool.focus(ev);
            }
        }
        else if (renderedTool.tool.canFocus && renderedTool.tool.canFocus()) {
            this.focused.renderedTool = renderedTool;
            this.focused.index = this.getFocusableTools().findIndex(function (rt) { return rt === renderedTool; });
            renderedTool.tool.focus(ev);
            this.blurOverflowButton();
        }
    };
    NavigationService.prototype.blurOverflowButton = function () {
        if (this.overflowButton) {
            this.isOverflowButtonFocused = false;
            this.overflowButton.nativeElement.tabIndex = -1;
        }
    };
    NavigationService.prototype.focusOverflowButton = function () {
        this.isOverflowButtonFocused = true;
        this.overflowButton.nativeElement.tabIndex = 0;
        this.overflowButton.nativeElement.focus();
    };
    NavigationService.prototype.isOverflowButtonVisible = function () {
        return (util_1.isPresent(this.overflowButton) &&
            window.getComputedStyle(this.overflowButton.nativeElement).getPropertyValue('visibility') === 'visible');
    };
    NavigationService.decorators = [
        { type: core_1.Injectable },
    ];
    return NavigationService;
}());
exports.NavigationService = NavigationService;
