/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
/**
 * @hidden
 */
var ToolBarButtonListComponent = /** @class */ (function () {
    function ToolBarButtonListComponent() {
        this.disabled = false;
        this.look = 'default';
        this.itemClick = new core_1.EventEmitter();
    }
    ToolBarButtonListComponent.prototype.getText = function (dataItem) {
        if (dataItem) {
            return this.textField ? dataItem[this.textField] : dataItem.text || dataItem;
        }
        return undefined;
    };
    ToolBarButtonListComponent.prototype.onClick = function (item, index) {
        var dataItem = this.data[index];
        if (item.click) {
            item.click(dataItem);
        }
        this.itemClick.emit(dataItem);
    };
    ToolBarButtonListComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'kendo-toolbar-buttonlist',
                    template: "\n        <button\n            #button\n            type=\"button\"\n            tabindex=\"-1\"\n            kendoButton\n            style=\"padding-left: 16px\"\n            class=\"k-overflow-button\"\n            *ngFor=\"let item of data; let i = index\"\n            [disabled]=\"disabled || item.disabled\"\n            [icon]=\"item.icon\"\n            [iconClass]=\"item.iconClass\"\n            [imageUrl]=\"item.imageUrl\"\n            [look]=\"look\"\n            (click)=\"onClick(item, i)\"\n        >\n            {{ getText(item) }}\n        </button>\n    "
                },] },
    ];
    ToolBarButtonListComponent.propDecorators = {
        data: [{ type: core_1.Input }],
        textField: [{ type: core_1.Input }],
        disabled: [{ type: core_1.Input }],
        look: [{ type: core_1.Input }],
        itemClick: [{ type: core_1.Output }],
        buttons: [{ type: core_1.ViewChildren, args: ['button',] }]
    };
    return ToolBarButtonListComponent;
}());
exports.ToolBarButtonListComponent = ToolBarButtonListComponent;
