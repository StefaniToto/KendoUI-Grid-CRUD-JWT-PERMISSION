/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, TemplateRef, forwardRef, ViewChild, Input, ElementRef, Output, EventEmitter } from '@angular/core';
import { SplitButtonComponent } from '@progress/kendo-angular-buttons';
import { ToolBarToolComponent } from './toolbar-tool.component';
import { ToolBarButtonListComponent } from './toolbar-buttonlist.component';
import { getValueForLocation, makePeeker, getIndexOfFocused, getPrevKey, getNextKey, seekFocusedIndex, areEqual } from '../util';
/**
 * Represents the [Kendo UI ToolBar SplitButton for Angular]({% slug controltypes_toolbar %}#toc-splitbuttons).
 */
export class ToolBarSplitButtonComponent extends ToolBarToolComponent {
    constructor() {
        super();
        // showText and showIcon showIcon should be declared first
        /**
         * Specifies where button text should be displayed
         */
        this.showText = 'both';
        /**
         * Specifies where button icon should be displayed
         */
        this.showIcon = 'both';
        /**
         * Changes the visual appearance by using alternative styling options
         * ([see example]({% slug controltypes_toolbar %}#toc-split-buttons)).
         *
         * The available values are:
         * * `default`
         * * `flat`
         * * `outline`
         */
        this.look = 'default';
        /**
         * Specifies the name of the [font icon]({% slug icons %}#toc-list-of-font-icons) that will
         * be rendered for the button which opens the popup.
         */
        this.arrowButtonIcon = 'arrow-s';
        /**
         * Configures the text field of the button-list popup.
         */
        this.textField = 'text';
        /**
         * Fires each time the user clicks the main button.
         */
        this.buttonClick = new EventEmitter();
        /**
         * Fires each time the user clicks the drop-down list.
         * The event data contains the data item that is bound to the clicked list item.
         */
        this.itemClick = new EventEmitter();
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel the event, the popup will remain closed.
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel the event, the popup will remain open.
         */
        this.close = new EventEmitter();
        this.toolbarOptions = {
            text: '',
            icon: '',
            iconClass: '',
            imageUrl: ''
        };
        this.overflowOptions = {
            text: '',
            icon: '',
            iconClass: '',
            imageUrl: ''
        };
        this._popupSettings = { animate: true, popupClass: '' };
        this.focusedIndex = -1;
        this.getNextKey = getNextKey();
        this.getPrevKey = getPrevKey();
    }
    /**
     * Sets the text of the SplitButton ([see example]({% slug controltypes_toolbar %}#toc-splitbuttons).
     */
    set text(text) {
        this.toolbarOptions.text = getValueForLocation(text, this.showText, false);
        this.overflowOptions.text = getValueForLocation(text, this.showText, true);
    }
    /**
     * Defines the icon that will be rendered next to the button text
     * ([see example]({% slug controltypes_toolbar %}#toc-splitbuttons)).
     */
    set icon(icon) {
        this.toolbarOptions.icon = getValueForLocation(icon, this.showIcon, false);
        this.overflowOptions.icon = getValueForLocation(icon, this.showIcon, true);
    }
    /**
     * Defines an icon with a custom CSS class that will be rendered next to the button text.
     */
    set iconClass(iconClass) {
        this.toolbarOptions.iconClass = getValueForLocation(iconClass, this.showIcon, false);
        this.overflowOptions.iconClass = getValueForLocation(iconClass, this.showIcon, true);
    }
    /**
     * Defines the location of an image that will be displayed next to the button text.
     */
    set imageUrl(imageUrl) {
        this.toolbarOptions.imageUrl = getValueForLocation(imageUrl, this.showIcon, false);
        this.overflowOptions.imageUrl = getValueForLocation(imageUrl, this.showIcon, true);
    }
    /**
     * Configures the popup of the SplitButton.
     *
     * The available options are:
     * - `animate:Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `popupClass:String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     */
    set popupSettings(value) {
        this._popupSettings = value;
    }
    get popupSettings() {
        if (!this._popupSettings) {
            this._popupSettings = { animate: true, popupClass: '' };
        }
        return this._popupSettings;
    }
    /**
     * Sets the data of the SplitButton ([see example]({% slug controltypes_toolbar %}#toc-splitbuttons)).
     *
     * > The data has to be provided in an array-like list.
     */
    set data(data) {
        this._data = data || [];
    }
    get data() {
        if (!this._data) {
            this.data = [];
        }
        return this._data;
    }
    get overflowButtons() {
        return [this.overflowSplitButton, ...this.overflowSplitButtonButtonList.buttons.toArray().filter(b => !b.nativeElement.disabled)];
    }
    /**
     * @hidden
     */
    onButtonListClick(ev) {
        this.focusedIndex = this.overflowButtons.findIndex(b => b.nativeElement.contains(ev.target));
    }
    /**
     * @hidden
     */
    onMainButtonClick(ev) {
        this.buttonClick.emit(ev);
        this.focusedIndex = 0;
    }
    /**
     * @hidden
     */
    canFocus() {
        return !this.disabled;
    }
    /**
     * @hidden
     */
    focus(ev = {}) {
        if (!this.overflows) {
            if (ev.type === 'focus' || ev.type === 'keydown') {
                this.toolbarSplitButton.focus();
            }
        }
        else if (this.overflowButtons.length > 0) {
            this.focusedIndex = getIndexOfFocused(this.getPrevKey(), this.getNextKey(), this.overflowButtons.map(ob => ob.nativeElement))(ev);
            this.focusButton(this.focusedIndex, ev);
        }
    }
    /**
     * @hidden
     */
    handleKey(ev) {
        if (!this.overflows && (ev.keyCode === this.getPrevKey(this.overflows) || ev.keyCode === this.getNextKey(this.overflows))) {
            return false;
        }
        if (this.overflows) {
            const peekAtIndex = makePeeker(this.overflowButtons);
            const isUnmodified = areEqual(this.focusedIndex);
            this.focusedIndex = seekFocusedIndex(this.getPrevKey(), this.getNextKey(), peekAtIndex)(this.focusedIndex, ev);
            this.focusButton(this.focusedIndex, ev);
            return !isUnmodified(this.focusedIndex);
        }
    }
    focusButton(index, ev) {
        if (!ev.type || ev.type === 'focus' || ev.type === 'keydown' || ev.type === 'click') {
            this.overflowButtons[index].nativeElement.focus();
        }
    }
}
ToolBarSplitButtonComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'kendoToolBarSplitButton',
                // tslint:disable-next-line:no-forward-ref
                providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => ToolBarSplitButtonComponent) }],
                selector: 'kendo-toolbar-splitbutton',
                template: `
        <ng-template #toolbarTemplate>
            <kendo-splitbutton
                #toolbarSplitButton
                [data]="data"
                [text]="toolbarOptions.text"
                [icon]="toolbarOptions.icon"
                [iconClass]="toolbarOptions.iconClass"
                [imageUrl]="toolbarOptions.imageUrl"
                [buttonClass]="buttonClass"
                [arrowButtonClass]="arrowButtonClass"
                [arrowButtonIcon]="arrowButtonIcon"
                [disabled]="disabled"
                [tabIndex]="-1"
                [textField]="textField"
                [popupSettings]="popupSettings"
                [look]="look"
                (buttonClick)="buttonClick.emit($event)"
                (open)="open.emit($event)"
                (close)="close.emit($event)"
                (itemClick)="itemClick.emit($event)"
            >
            </kendo-splitbutton>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                #overflowSplitButton
                type="button"
                tabindex="-1"
                kendoButton
                class="k-overflow-button"
                [disabled]="disabled"
                [icon]="overflowOptions.icon"
                [iconClass]="overflowOptions.iconClass"
                [imageUrl]="overflowOptions.imageUrl"
                [look]="look"
                [ngClass]="buttonClass"
                (click)="buttonClick.emit($event)"
                (click)="onMainButtonClick($event)"
            >
                {{ overflowOptions.text }}
            </button>
            <kendo-toolbar-buttonlist
                #overflowSplitButtonButtonList
                [look]="look"
                [data]="data"
                [disabled]="disabled"
                [textField]="textField"
                (itemClick)="itemClick.emit($event)"
                (click)="onButtonListClick($event)"
            >
            </kendo-toolbar-buttonlist>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
ToolBarSplitButtonComponent.ctorParameters = () => [];
ToolBarSplitButtonComponent.propDecorators = {
    showText: [{ type: Input }],
    showIcon: [{ type: Input }],
    text: [{ type: Input }],
    icon: [{ type: Input }],
    iconClass: [{ type: Input }],
    imageUrl: [{ type: Input }],
    disabled: [{ type: Input }],
    look: [{ type: Input }],
    popupSettings: [{ type: Input }],
    buttonClass: [{ type: Input }],
    arrowButtonClass: [{ type: Input }],
    arrowButtonIcon: [{ type: Input }],
    textField: [{ type: Input }],
    data: [{ type: Input }],
    buttonClick: [{ type: Output }],
    itemClick: [{ type: Output }],
    open: [{ type: Output }],
    close: [{ type: Output }],
    toolbarTemplate: [{ type: ViewChild, args: ['toolbarTemplate', { static: true },] }],
    popupTemplate: [{ type: ViewChild, args: ['popupTemplate', { static: true },] }],
    toolbarSplitButton: [{ type: ViewChild, args: ['toolbarSplitButton',] }],
    overflowSplitButton: [{ type: ViewChild, args: ['overflowSplitButton', { read: ElementRef },] }],
    overflowSplitButtonButtonList: [{ type: ViewChild, args: ['overflowSplitButtonButtonList',] }]
};
