/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef, EventEmitter } from '@angular/core';
import { ButtonLook } from '@progress/kendo-angular-buttons';
import { ToolBarToolComponent } from './toolbar-tool.component';
import { PopupSettings } from '../popup-settings';
import { DisplayMode } from '../display-mode';
import { ToolOptions } from '../tool-options';
import { PreventableEvent } from '../common/preventable-event';
/**
 * Represents the [Kendo UI ToolBar SplitButton for Angular]({% slug controltypes_toolbar %}#toc-splitbuttons).
 */
export declare class ToolBarSplitButtonComponent extends ToolBarToolComponent {
    /**
     * Specifies where button text should be displayed
     */
    showText: DisplayMode;
    /**
     * Specifies where button icon should be displayed
     */
    showIcon: DisplayMode;
    /**
     * Sets the text of the SplitButton ([see example]({% slug controltypes_toolbar %}#toc-splitbuttons).
     */
    text: string;
    /**
     * Defines the icon that will be rendered next to the button text
     * ([see example]({% slug controltypes_toolbar %}#toc-splitbuttons)).
     */
    icon: string;
    /**
     * Defines an icon with a custom CSS class that will be rendered next to the button text.
     */
    iconClass: string;
    /**
     * Defines the location of an image that will be displayed next to the button text.
     */
    imageUrl: string;
    /**
     * When set to `true`, disables a SplitButton item.
     */
    disabled: boolean;
    /**
     * Changes the visual appearance by using alternative styling options
     * ([see example]({% slug controltypes_toolbar %}#toc-split-buttons)).
     *
     * The available values are:
     * * `default`
     * * `flat`
     * * `outline`
     */
    look: ButtonLook;
    /**
     * Configures the popup of the SplitButton.
     *
     * The available options are:
     * - `animate:Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `popupClass:String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     */
    popupSettings: PopupSettings;
    /**
     * The CSS classes that will be rendered on the main button.
     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).
     */
    buttonClass: string;
    /**
     * The CSS classes that will be rendered on the button which opens the popup.
     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).
     */
    arrowButtonClass: any;
    /**
     * Specifies the name of the [font icon]({% slug icons %}#toc-list-of-font-icons) that will
     * be rendered for the button which opens the popup.
     */
    arrowButtonIcon: string;
    /**
     * Configures the text field of the button-list popup.
     */
    textField: string;
    /**
     * Sets the data of the SplitButton ([see example]({% slug controltypes_toolbar %}#toc-splitbuttons)).
     *
     * > The data has to be provided in an array-like list.
     */
    data: any[];
    /**
     * Fires each time the user clicks the main button.
     */
    buttonClick: EventEmitter<any>;
    /**
     * Fires each time the user clicks the drop-down list.
     * The event data contains the data item that is bound to the clicked list item.
     */
    itemClick: EventEmitter<any>;
    /**
     * Fires each time the popup is about to open.
     * This event is preventable. If you cancel the event, the popup will remain closed.
     */
    open: EventEmitter<PreventableEvent>;
    /**
     * Fires each time the popup is about to close.
     * This event is preventable. If you cancel the event, the popup will remain open.
     */
    close: EventEmitter<PreventableEvent>;
    toolbarTemplate: TemplateRef<any>;
    popupTemplate: TemplateRef<any>;
    toolbarOptions: ToolOptions;
    overflowOptions: ToolOptions;
    private readonly overflowButtons;
    private _data;
    private _popupSettings;
    private focusedIndex;
    private getNextKey;
    private getPrevKey;
    private toolbarSplitButton;
    private overflowSplitButton;
    private overflowSplitButtonButtonList;
    constructor();
    /**
     * @hidden
     */
    onButtonListClick(ev: MouseEvent): void;
    /**
     * @hidden
     */
    onMainButtonClick(ev: MouseEvent): void;
    /**
     * @hidden
     */
    canFocus(): boolean;
    /**
     * @hidden
     */
    focus(ev?: Partial<Event>): void;
    /**
     * @hidden
     */
    handleKey(ev: any): boolean;
    private focusButton;
}
