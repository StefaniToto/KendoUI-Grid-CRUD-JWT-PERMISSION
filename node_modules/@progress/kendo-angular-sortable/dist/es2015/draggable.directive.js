/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Directive, HostBinding, Input, Inject, forwardRef, ElementRef, Renderer2 } from '@angular/core';
import { SortableComponent } from './sortable.component';
/**
 * @hidden
 */
export class DraggableDirective {
    constructor(
    /* tslint:disable:no-forward-ref */
    parent, el, renderer) {
        this.parent = parent;
        this.el = el;
        this.renderer = renderer;
    }
    get _focused() {
        return this.disabled ? false : (this.index === this.parent.activeIndex);
    }
    get _disabled() {
        return this.disabled;
    }
    get display() {
        return this.hidden ? "none" : this._display;
    }
    set display(display) {
        this._display = display;
    }
    ngOnInit() {
        const nativeElement = this.el.nativeElement;
        this.display = nativeElement.style.display;
        if (nativeElement) { // Remove the inline styles after a few releases of the themes with the style.
            this.renderer.setStyle(nativeElement, 'user-select', 'none');
            this.renderer.setStyle(nativeElement, '-ms-user-select', 'none');
            this.renderer.setStyle(nativeElement, '-moz-user-select', 'none');
            this.renderer.setStyle(nativeElement, '-webkit-user-select', 'none');
        }
    }
}
DraggableDirective.decorators = [
    { type: Directive, args: [{
                selector: '[kendoDraggable]'
            },] },
];
/** @nocollapse */
DraggableDirective.ctorParameters = () => [
    { type: SortableComponent, decorators: [{ type: Inject, args: [forwardRef(() => SortableComponent),] }] },
    { type: ElementRef },
    { type: Renderer2 }
];
DraggableDirective.propDecorators = {
    index: [{ type: Input }],
    hidden: [{ type: Input }],
    disabled: [{ type: Input }],
    _focused: [{ type: HostBinding, args: ['class.k-state-focused',] }],
    _disabled: [{ type: HostBinding, args: ['attr.aria-disabled',] }],
    display: [{ type: HostBinding, args: ['style.display',] }]
};
