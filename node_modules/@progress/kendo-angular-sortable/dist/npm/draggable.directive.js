/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var sortable_component_1 = require("./sortable.component");
/**
 * @hidden
 */
var DraggableDirective = /** @class */ (function () {
    function DraggableDirective(
    /* tslint:disable:no-forward-ref */
    parent, el, renderer) {
        this.parent = parent;
        this.el = el;
        this.renderer = renderer;
    }
    Object.defineProperty(DraggableDirective.prototype, "_focused", {
        get: function () {
            return this.disabled ? false : (this.index === this.parent.activeIndex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DraggableDirective.prototype, "_disabled", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DraggableDirective.prototype, "display", {
        get: function () {
            return this.hidden ? "none" : this._display;
        },
        set: function (display) {
            this._display = display;
        },
        enumerable: true,
        configurable: true
    });
    DraggableDirective.prototype.ngOnInit = function () {
        var nativeElement = this.el.nativeElement;
        this.display = nativeElement.style.display;
        if (nativeElement) { // Remove the inline styles after a few releases of the themes with the style.
            this.renderer.setStyle(nativeElement, 'user-select', 'none');
            this.renderer.setStyle(nativeElement, '-ms-user-select', 'none');
            this.renderer.setStyle(nativeElement, '-moz-user-select', 'none');
            this.renderer.setStyle(nativeElement, '-webkit-user-select', 'none');
        }
    };
    DraggableDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[kendoDraggable]'
                },] },
    ];
    /** @nocollapse */
    DraggableDirective.ctorParameters = function () { return [
        { type: sortable_component_1.SortableComponent, decorators: [{ type: core_1.Inject, args: [core_1.forwardRef(function () { return sortable_component_1.SortableComponent; }),] }] },
        { type: core_1.ElementRef },
        { type: core_1.Renderer2 }
    ]; };
    DraggableDirective.propDecorators = {
        index: [{ type: core_1.Input }],
        hidden: [{ type: core_1.Input }],
        disabled: [{ type: core_1.Input }],
        _focused: [{ type: core_1.HostBinding, args: ['class.k-state-focused',] }],
        _disabled: [{ type: core_1.HostBinding, args: ['attr.aria-disabled',] }],
        display: [{ type: core_1.HostBinding, args: ['style.display',] }]
    };
    return DraggableDirective;
}());
exports.DraggableDirective = DraggableDirective;
