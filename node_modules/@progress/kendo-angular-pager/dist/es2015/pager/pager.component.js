/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { RESPONSIVE_BREAKPOINT_MEDIUM, RESPONSIVE_BREAKPOINT_LARGE } from './common/constants';
import { Component, Input, EventEmitter, Output, HostBinding, ViewChild, ElementRef, ContentChild } from '@angular/core';
import { PagerTemplateDirective } from "./pager-template.directive";
import { anyChanged, ResizeSensorComponent } from "@progress/kendo-angular-common";
import { PagerContextService } from "./pager-context.service";
import { Subscription } from "rxjs";
import { DEFAULT_PAGE_SIZE_VALUES } from '../util';
import { LocalizationService } from '@progress/kendo-angular-l10n';
export class PagerComponent {
    constructor(pagerContext, element, localization) {
        this.pagerContext = pagerContext;
        this.element = element;
        this.localization = localization;
        /**
         * Represents the total number of data items in the collection.
         */
        this.total = 0;
        /**
         * Defines the number of data items to be skipped.
         */
        this.skip = 0;
        /**
         * Sets the maximum numeric buttons count before the buttons are collapsed.
         */
        this.buttonCount = 10;
        /**
         * Toggles the information about the current page and the total number of records.
         */
        this.info = true;
        /**
         * Defines the type of the pager.
         */
        this.type = 'numeric';
        /**
         * Toggles the **Previous** and **Next** buttons.
         */
        this.previousNext = true;
        /**
         * Fires when the current page of the Pager is changed ([see example]({% slug overview_pager %}#toc-basic-usage)).
         * You have to handle the event yourself and page the data.
         */
        this.pageChange = new EventEmitter();
        /**
         * Fires when the page size of the Pager is changed.
         * You have to handle the event yourself and page the data.
         * If the event is prevented, the page size will remain unchanged ([see example]({% slug pager_events %})).
         */
        this.pageSizeChange = new EventEmitter();
        this.pagerWrapClass = true;
        this.pagerClass = true;
        this.widgetClass = true;
        this.widgetRole = 'navigation';
        this.subscriptions = new Subscription();
        this._templateContext = {};
        this._pageSizeValues = DEFAULT_PAGE_SIZE_VALUES;
        this.resizeHandler = () => {
            if (this.template) {
                return;
            }
            const element = this.element.nativeElement;
            const width = element.offsetWidth;
            if (width < RESPONSIVE_BREAKPOINT_MEDIUM) {
                element.classList.remove('k-pager-md');
                element.classList.add('k-pager-sm');
            }
            else if (width >= RESPONSIVE_BREAKPOINT_MEDIUM && width < RESPONSIVE_BREAKPOINT_LARGE) {
                element.classList.add('k-pager-md');
                element.classList.remove('k-pager-sm');
            }
            else {
                element.classList.remove('k-pager-md');
                element.classList.remove('k-pager-sm');
            }
        };
        this.direction = localization.rtl ? 'rtl' : 'ltr';
    }
    /**
     * Shows a dropdown for selecting the page size.
     * When set to `true`, the dropdown will contain the default list of options - 5, 10, 20.
     * To customize the list of options, set `pageSizeValues` to an array of the desired values.
     * The array can contain numbers and [PageSizeItem]({% slug api_pager_pagesizeitem %}) objects.
     */
    set pageSizeValues(pageSizeValues) {
        this._pageSizeValues = Array.isArray(pageSizeValues) ? pageSizeValues : pageSizeValues ? DEFAULT_PAGE_SIZE_VALUES : false;
    }
    get dir() {
        return this.direction;
    }
    get totalPages() {
        return Math.ceil((this.total || 0) / this.pageSize);
    }
    get currentPage() {
        return Math.floor((this.skip || 0) / this.pageSize) + 1;
    }
    get pageSizeValues() {
        return this._pageSizeValues;
    }
    get templateContext() {
        const context = this._templateContext;
        context.totalPages = this.totalPages;
        context.total = this.total;
        context.skip = this.skip;
        context.pageSize = this.pageSize;
        context.currentPage = this.currentPage;
        return context;
    }
    ngOnInit() {
        this.subscriptions.add(this.pagerContext.pageChange.subscribe(this.changePage.bind(this)));
        this.subscriptions.add(this.pagerContext.pageSizeChange.subscribe(this.changePageSize.bind(this)));
        this.subscriptions.add(this.resizeSensor.resize.subscribe(() => this.resizeHandler()));
        this.subscriptions.add(this.localization.changes.subscribe(({ rtl }) => {
            this.direction = rtl ? 'rtl' : 'ltr';
        }));
    }
    ngAfterViewInit() {
        this.resizeHandler();
    }
    ngOnChanges(changes) {
        if (anyChanged(["pageSize", "skip", "total"], changes, false)) {
            this.pagerContext.notifyChanges({
                pageSize: this.pageSize,
                skip: this.skip,
                total: this.total
            });
        }
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    /**
     * @hidden
     */
    changePage(event) {
        this.pageChange.emit(event);
    }
    /**
     * @hidden
     */
    changePageSize(event) {
        this.pageSizeChange.emit(event);
        if (!event.isDefaultPrevented()) {
            if (event.newPageSize === 'all') {
                this.pageChange.emit({ skip: 0, take: this.total });
            }
            else {
                this.pageChange.emit({ skip: 0, take: event.newPageSize });
            }
        }
    }
    /**
     * @hidden
     */
    onPageSizeChange(event) {
        this.pageSizeChange.emit(event);
        if (!event.isDefaultPrevented()) {
            this.pageChange.emit({ skip: this.skip, take: event.newPageSize });
        }
    }
}
PagerComponent.decorators = [
    { type: Component, args: [{
                selector: 'kendo-datapager',
                exportAs: 'kendoDataPager',
                providers: [
                    LocalizationService,
                    PagerContextService
                ],
                template: `
        <ng-container kendoDataPagerLocalizedMessages
            i18n-firstPage="kendo.pager.firstPage|The label for the first page button in the Pager"
            firstPage="Go to the first page"

            i18n-previousPage="kendo.pager.previousPage|The label for the previous page button in the Pager"
            previousPage="Go to the previous page"

            i18n-nextPage="kendo.pager.nextPage|The label for the next page button in the Pager"
            nextPage="Go to the next page"

            i18n-lastPage="kendo.pager.lastPage|The label for the last page button in the Pager"
            lastPage="Go to the last page"

            i18n-page="kendo.pager.page|The label before the current page number in the Pager"
            page="Page"

            i18n-of="kendo.pager.of|The label before the total pages number in the Pager"
            of="of"

            i18n-items="kendo.pager.items|The label after the total pages number in the Pager"
            items="items"

            i18n-itemsPerPage="kendo.pager.itemsPerPage|The label for the page size chooser in the Pager"
            itemsPerPage="items per page"
         >
        </ng-container>
        <ng-container
            *ngIf="template?.templateRef"
            [ngTemplateOutlet]="template.templateRef"
            [ngTemplateOutletContext]="templateContext">
        </ng-container>
        <ng-container *ngIf="!template?.templateRef">
            <kendo-datapager-prev-buttons *ngIf="previousNext"></kendo-datapager-prev-buttons>
            <kendo-datapager-numeric-buttons
                *ngIf="type === 'numeric' && buttonCount > 0"
                [buttonCount]="buttonCount">
            </kendo-datapager-numeric-buttons>
            <kendo-datapager-input *ngIf="type === 'input'"></kendo-datapager-input>
            <kendo-datapager-next-buttons *ngIf="previousNext"></kendo-datapager-next-buttons>
            <kendo-datapager-info *ngIf='info'></kendo-datapager-info>
            <kendo-datapager-page-sizes *ngIf="pageSizeValues" [pageSizes]="pageSizeValues"></kendo-datapager-page-sizes>
        </ng-container>
        <kendo-resize-sensor></kendo-resize-sensor>
  `
            },] },
];
/** @nocollapse */
PagerComponent.ctorParameters = () => [
    { type: PagerContextService },
    { type: ElementRef },
    { type: LocalizationService }
];
PagerComponent.propDecorators = {
    resizeSensor: [{ type: ViewChild, args: [ResizeSensorComponent, { static: true },] }],
    template: [{ type: ContentChild, args: [PagerTemplateDirective, { static: true },] }],
    total: [{ type: Input }],
    skip: [{ type: Input }],
    pageSize: [{ type: Input }],
    buttonCount: [{ type: Input }],
    info: [{ type: Input }],
    type: [{ type: Input }],
    pageSizeValues: [{ type: Input }],
    previousNext: [{ type: Input }],
    pageChange: [{ type: Output }],
    pageSizeChange: [{ type: Output }],
    pagerWrapClass: [{ type: HostBinding, args: ['class.k-pager-wrap',] }],
    pagerClass: [{ type: HostBinding, args: ['class.k-pager',] }],
    widgetClass: [{ type: HostBinding, args: ['class.k-widget',] }],
    widgetRole: [{ type: HostBinding, args: ['attr.role',] }],
    dir: [{ type: HostBinding, args: ['attr.dir',] }]
};
