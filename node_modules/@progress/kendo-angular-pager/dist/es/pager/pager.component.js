/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { RESPONSIVE_BREAKPOINT_MEDIUM, RESPONSIVE_BREAKPOINT_LARGE } from './common/constants';
import { Component, Input, EventEmitter, Output, HostBinding, ViewChild, ElementRef, ContentChild } from '@angular/core';
import { PagerTemplateDirective } from "./pager-template.directive";
import { anyChanged, ResizeSensorComponent } from "@progress/kendo-angular-common";
import { PagerContextService } from "./pager-context.service";
import { Subscription } from "rxjs";
import { DEFAULT_PAGE_SIZE_VALUES } from '../util';
import { LocalizationService } from '@progress/kendo-angular-l10n';
var PagerComponent = /** @class */ (function () {
    function PagerComponent(pagerContext, element, localization) {
        var _this = this;
        this.pagerContext = pagerContext;
        this.element = element;
        this.localization = localization;
        /**
         * Represents the total number of data items in the collection.
         */
        this.total = 0;
        /**
         * Defines the number of data items to be skipped.
         */
        this.skip = 0;
        /**
         * Sets the maximum numeric buttons count before the buttons are collapsed.
         */
        this.buttonCount = 10;
        /**
         * Toggles the information about the current page and the total number of records.
         */
        this.info = true;
        /**
         * Defines the type of the pager.
         */
        this.type = 'numeric';
        /**
         * Toggles the **Previous** and **Next** buttons.
         */
        this.previousNext = true;
        /**
         * Fires when the current page of the Pager is changed ([see example]({% slug overview_pager %}#toc-basic-usage)).
         * You have to handle the event yourself and page the data.
         */
        this.pageChange = new EventEmitter();
        /**
         * Fires when the page size of the Pager is changed.
         * You have to handle the event yourself and page the data.
         * If the event is prevented, the page size will remain unchanged ([see example]({% slug pager_events %})).
         */
        this.pageSizeChange = new EventEmitter();
        this.pagerWrapClass = true;
        this.pagerClass = true;
        this.widgetClass = true;
        this.widgetRole = 'navigation';
        this.subscriptions = new Subscription();
        this._templateContext = {};
        this._pageSizeValues = DEFAULT_PAGE_SIZE_VALUES;
        this.resizeHandler = function () {
            if (_this.template) {
                return;
            }
            var element = _this.element.nativeElement;
            var width = element.offsetWidth;
            if (width < RESPONSIVE_BREAKPOINT_MEDIUM) {
                element.classList.remove('k-pager-md');
                element.classList.add('k-pager-sm');
            }
            else if (width >= RESPONSIVE_BREAKPOINT_MEDIUM && width < RESPONSIVE_BREAKPOINT_LARGE) {
                element.classList.add('k-pager-md');
                element.classList.remove('k-pager-sm');
            }
            else {
                element.classList.remove('k-pager-md');
                element.classList.remove('k-pager-sm');
            }
        };
        this.direction = localization.rtl ? 'rtl' : 'ltr';
    }
    Object.defineProperty(PagerComponent.prototype, "pageSizeValues", {
        get: function () {
            return this._pageSizeValues;
        },
        /**
         * Shows a dropdown for selecting the page size.
         * When set to `true`, the dropdown will contain the default list of options - 5, 10, 20.
         * To customize the list of options, set `pageSizeValues` to an array of the desired values.
         * The array can contain numbers and [PageSizeItem]({% slug api_pager_pagesizeitem %}) objects.
         */
        set: function (pageSizeValues) {
            this._pageSizeValues = Array.isArray(pageSizeValues) ? pageSizeValues : pageSizeValues ? DEFAULT_PAGE_SIZE_VALUES : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "dir", {
        get: function () {
            return this.direction;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "totalPages", {
        get: function () {
            return Math.ceil((this.total || 0) / this.pageSize);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "currentPage", {
        get: function () {
            return Math.floor((this.skip || 0) / this.pageSize) + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "templateContext", {
        get: function () {
            var context = this._templateContext;
            context.totalPages = this.totalPages;
            context.total = this.total;
            context.skip = this.skip;
            context.pageSize = this.pageSize;
            context.currentPage = this.currentPage;
            return context;
        },
        enumerable: true,
        configurable: true
    });
    PagerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions.add(this.pagerContext.pageChange.subscribe(this.changePage.bind(this)));
        this.subscriptions.add(this.pagerContext.pageSizeChange.subscribe(this.changePageSize.bind(this)));
        this.subscriptions.add(this.resizeSensor.resize.subscribe(function () { return _this.resizeHandler(); }));
        this.subscriptions.add(this.localization.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        }));
    };
    PagerComponent.prototype.ngAfterViewInit = function () {
        this.resizeHandler();
    };
    PagerComponent.prototype.ngOnChanges = function (changes) {
        if (anyChanged(["pageSize", "skip", "total"], changes, false)) {
            this.pagerContext.notifyChanges({
                pageSize: this.pageSize,
                skip: this.skip,
                total: this.total
            });
        }
    };
    PagerComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    /**
     * @hidden
     */
    PagerComponent.prototype.changePage = function (event) {
        this.pageChange.emit(event);
    };
    /**
     * @hidden
     */
    PagerComponent.prototype.changePageSize = function (event) {
        this.pageSizeChange.emit(event);
        if (!event.isDefaultPrevented()) {
            if (event.newPageSize === 'all') {
                this.pageChange.emit({ skip: 0, take: this.total });
            }
            else {
                this.pageChange.emit({ skip: 0, take: event.newPageSize });
            }
        }
    };
    /**
     * @hidden
     */
    PagerComponent.prototype.onPageSizeChange = function (event) {
        this.pageSizeChange.emit(event);
        if (!event.isDefaultPrevented()) {
            this.pageChange.emit({ skip: this.skip, take: event.newPageSize });
        }
    };
    PagerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'kendo-datapager',
                    exportAs: 'kendoDataPager',
                    providers: [
                        LocalizationService,
                        PagerContextService
                    ],
                    template: "\n        <ng-container kendoDataPagerLocalizedMessages\n            i18n-firstPage=\"kendo.pager.firstPage|The label for the first page button in the Pager\"\n            firstPage=\"Go to the first page\"\n\n            i18n-previousPage=\"kendo.pager.previousPage|The label for the previous page button in the Pager\"\n            previousPage=\"Go to the previous page\"\n\n            i18n-nextPage=\"kendo.pager.nextPage|The label for the next page button in the Pager\"\n            nextPage=\"Go to the next page\"\n\n            i18n-lastPage=\"kendo.pager.lastPage|The label for the last page button in the Pager\"\n            lastPage=\"Go to the last page\"\n\n            i18n-page=\"kendo.pager.page|The label before the current page number in the Pager\"\n            page=\"Page\"\n\n            i18n-of=\"kendo.pager.of|The label before the total pages number in the Pager\"\n            of=\"of\"\n\n            i18n-items=\"kendo.pager.items|The label after the total pages number in the Pager\"\n            items=\"items\"\n\n            i18n-itemsPerPage=\"kendo.pager.itemsPerPage|The label for the page size chooser in the Pager\"\n            itemsPerPage=\"items per page\"\n         >\n        </ng-container>\n        <ng-container\n            *ngIf=\"template?.templateRef\"\n            [ngTemplateOutlet]=\"template.templateRef\"\n            [ngTemplateOutletContext]=\"templateContext\">\n        </ng-container>\n        <ng-container *ngIf=\"!template?.templateRef\">\n            <kendo-datapager-prev-buttons *ngIf=\"previousNext\"></kendo-datapager-prev-buttons>\n            <kendo-datapager-numeric-buttons\n                *ngIf=\"type === 'numeric' && buttonCount > 0\"\n                [buttonCount]=\"buttonCount\">\n            </kendo-datapager-numeric-buttons>\n            <kendo-datapager-input *ngIf=\"type === 'input'\"></kendo-datapager-input>\n            <kendo-datapager-next-buttons *ngIf=\"previousNext\"></kendo-datapager-next-buttons>\n            <kendo-datapager-info *ngIf='info'></kendo-datapager-info>\n            <kendo-datapager-page-sizes *ngIf=\"pageSizeValues\" [pageSizes]=\"pageSizeValues\"></kendo-datapager-page-sizes>\n        </ng-container>\n        <kendo-resize-sensor></kendo-resize-sensor>\n  "
                },] },
    ];
    /** @nocollapse */
    PagerComponent.ctorParameters = function () { return [
        { type: PagerContextService },
        { type: ElementRef },
        { type: LocalizationService }
    ]; };
    PagerComponent.propDecorators = {
        resizeSensor: [{ type: ViewChild, args: [ResizeSensorComponent, { static: true },] }],
        template: [{ type: ContentChild, args: [PagerTemplateDirective, { static: true },] }],
        total: [{ type: Input }],
        skip: [{ type: Input }],
        pageSize: [{ type: Input }],
        buttonCount: [{ type: Input }],
        info: [{ type: Input }],
        type: [{ type: Input }],
        pageSizeValues: [{ type: Input }],
        previousNext: [{ type: Input }],
        pageChange: [{ type: Output }],
        pageSizeChange: [{ type: Output }],
        pagerWrapClass: [{ type: HostBinding, args: ['class.k-pager-wrap',] }],
        pagerClass: [{ type: HostBinding, args: ['class.k-pager',] }],
        widgetClass: [{ type: HostBinding, args: ['class.k-widget',] }],
        widgetRole: [{ type: HostBinding, args: ['attr.role',] }],
        dir: [{ type: HostBinding, args: ['attr.dir',] }]
    };
    return PagerComponent;
}());
export { PagerComponent };
