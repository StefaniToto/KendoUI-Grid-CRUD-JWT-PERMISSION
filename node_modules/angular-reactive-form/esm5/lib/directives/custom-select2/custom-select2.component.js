/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef, Renderer } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as _ from 'lodash';
var CustomSelect2Component = /** @class */ (function () {
    function CustomSelect2Component(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.defaultValue = [];
        this.onChange = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { });
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    CustomSelect2Component.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            this.value = val;
        }
    };
    Object.defineProperty(CustomSelect2Component.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
            this.onChange(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    CustomSelect2Component.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    CustomSelect2Component.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    CustomSelect2Component.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @return {?}
     */
    CustomSelect2Component.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.actionRender();
        }), 1);
    };
    /**
     * @return {?}
     */
    CustomSelect2Component.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isClear === true) {
            if (!_.isUndefined(this.options) && !_.isEmpty(this.options)) {
                _.map(this.options, (/**
                 * @param {?} i
                 * @return {?}
                 */
                function (i) {
                    i.selected = undefined;
                }));
                this.defaultValue = [];
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.actionRender();
                }), 1);
            }
        }
    };
    /**
     * @return {?}
     */
    CustomSelect2Component.prototype.actionRender = /**
     * @return {?}
     */
    function () {
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var $this = this;
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var options = {};
        if (this.tags !== undefined && this.tags != null) {
            options.tags = this.tags;
        }
        if (this.isDisabled !== undefined && this.isDisabled != null && this.isDisabled === true) {
            options.disabled = true;
        }
        if (this.placeholder !== undefined && this.placeholder != null) {
            options.placeholder = this.placeholder;
        }
        $('#select2-reactive-form-' + this.id).select2(options);
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var oldData = $('#select2-reactive-form-' + this.id).select2('data');
        if (oldData != null && oldData !== undefined && !_.isEmpty(oldData)) {
            _.forEach(oldData, (/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                $this.defaultValue.push(value.id);
            }));
            this.value = this.defaultValue;
        }
        $('#select2-reactive-form-' + this.id).change((/**
         * @return {?}
         */
        function () {
            // tslint:disable-next-line:prefer-const
            /** @type {?} */
            var value = $(this).val();
            $this.value = value;
        }));
    };
    /**
     * @return {?}
     */
    CustomSelect2Component.prototype.selectedAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _.map(this.options, (/**
         * @param {?} i
         * @return {?}
         */
        function (i) {
            i.selected = true;
        }));
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.defaultValue = [];
            _this.actionRender();
        }), 1);
    };
    /**
     * @return {?}
     */
    CustomSelect2Component.prototype.clearAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _.map(this.options, (/**
         * @param {?} i
         * @return {?}
         */
        function (i) {
            delete i['selected'];
        }));
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.defaultValue = [];
            _this.value = _this.defaultValue;
            _this.actionRender();
        }), 1);
    };
    CustomSelect2Component.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'app-custom-select2',
                    template: "<select id=\"select2-reactive-form-{{ id }}\" class=\"form-control\" multiple select2>\n  <option *ngFor=\"let opt of options\" value=\"{{ opt.value }}\" selected=\"{{ opt.selected }}\">{{ opt.label }}</option>\n</select>\n<a class=\"btn btn-primary btn-group\" *ngIf=\"isSelectAll === true\" (click)=\"selectedAll()\">{{ selectBtnText }}</a> <a class=\"btn btn-danger btn-group\" *ngIf=\"isSelectAll === true\" (click)=\"clearAll()\">{{ clearBtnText }}</a>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return CustomSelect2Component; })),
                            multi: true
                        }
                    ],
                    styles: [".btn-group{color:#fff!important;margin-right:5px;margin-top:5px;padding:1px 6px;font-size:14px}"]
                }] }
    ];
    /** @nocollapse */
    CustomSelect2Component.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer }
    ]; };
    CustomSelect2Component.propDecorators = {
        tags: [{ type: Input }],
        placeholder: [{ type: Input }],
        options: [{ type: Input }],
        id: [{ type: Input }],
        _value: [{ type: Input }],
        isClear: [{ type: Input }],
        isSelectAll: [{ type: Input }],
        selectBtnText: [{ type: Input }],
        clearBtnText: [{ type: Input }],
        isDisabled: [{ type: Input }]
    };
    return CustomSelect2Component;
}());
export { CustomSelect2Component };
if (false) {
    /** @type {?} */
    CustomSelect2Component.prototype.tags;
    /** @type {?} */
    CustomSelect2Component.prototype.placeholder;
    /** @type {?} */
    CustomSelect2Component.prototype.options;
    /** @type {?} */
    CustomSelect2Component.prototype.id;
    /** @type {?} */
    CustomSelect2Component.prototype._value;
    /** @type {?} */
    CustomSelect2Component.prototype.isClear;
    /** @type {?} */
    CustomSelect2Component.prototype.isSelectAll;
    /** @type {?} */
    CustomSelect2Component.prototype.selectBtnText;
    /** @type {?} */
    CustomSelect2Component.prototype.clearBtnText;
    /** @type {?} */
    CustomSelect2Component.prototype.isDisabled;
    /** @type {?} */
    CustomSelect2Component.prototype.defaultValue;
    /**
     * @type {?}
     * @private
     */
    CustomSelect2Component.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    CustomSelect2Component.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    CustomSelect2Component.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    CustomSelect2Component.prototype.element;
    /**
     * @type {?}
     * @private
     */
    CustomSelect2Component.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXNlbGVjdDIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1yZWFjdGl2ZS1mb3JtLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY3VzdG9tLXNlbGVjdDIvY3VzdG9tLXNlbGVjdDIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFDN0csT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pFLE9BQU8sS0FBSyxDQUFDLE1BQU0sUUFBUSxDQUFDO0FBRzVCO0lBd0NFLGdDQUFvQixPQUFtQixFQUFVLFFBQWtCO1FBQS9DLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBTm5FLGlCQUFZLEdBQUcsRUFBRSxDQUFDO1FBT2hCLElBQUksQ0FBQyxRQUFROzs7O1FBQUcsVUFBQyxHQUFRLElBQU0sQ0FBQyxDQUFBLENBQUM7UUFDakMsSUFBSSxDQUFDLFNBQVM7OztRQUFHLGNBQU8sQ0FBQyxDQUFBLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFDRCwyQ0FBVTs7OztJQUFWLFVBQVcsR0FBUTtRQUNqQixJQUFJLEdBQUcsRUFBRTtZQUNQLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVELHNCQUFJLHlDQUFLOzs7O1FBQVQ7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQzs7Ozs7UUFFRCxVQUFVLEdBQUc7WUFDWCxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztR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Z0JBakJzQyxVQUFVO2dCQUFFLFFBQVE7Ozt1QkFtQnhELEtBQUs7OEJBRUwsS0FBSzswQkFFTCxLQUFLO3FCQUVMLEtBQUs7eUJBRUwsS0FBSzswQkFFTCxLQUFLOzhCQUVMLEtBQUs7Z0NBRUwsS0FBSzsrQkFFTCxLQUFLOzZCQUVMLEtBQUs7O0lBZ0hSLDZCQUFDO0NBQUEsQUFoSkQsSUFnSkM7U0FuSVksc0JBQXNCOzs7SUFDakMsc0NBQ2M7O0lBQ2QsNkNBQ29COztJQUNwQix5Q0FDYTs7SUFDYixvQ0FDVzs7SUFDWCx3Q0FDYzs7SUFDZCx5Q0FDaUI7O0lBQ2pCLDZDQUNxQjs7SUFDckIsK0NBQ3NCOztJQUN0Qiw4Q0FDcUI7O0lBQ3JCLDRDQUE2Qjs7SUFFN0IsOENBQWtCOzs7OztJQUVsQiwwQ0FBMEI7Ozs7O0lBQzFCLDBDQUEyQjs7Ozs7SUFDM0IsMkNBQTRCOzs7OztJQUVoQix5Q0FBMkI7Ozs7O0lBQUUsMENBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgZm9yd2FyZFJlZiwgRWxlbWVudFJlZiwgUmVuZGVyZXIsIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuZGVjbGFyZSBjb25zdCAkOiBhbnk7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnYXBwLWN1c3RvbS1zZWxlY3QyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2N1c3RvbS1zZWxlY3QyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vY3VzdG9tLXNlbGVjdDIuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBDdXN0b21TZWxlY3QyQ29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIEN1c3RvbVNlbGVjdDJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25DaGFuZ2VzIHtcbiAgQElucHV0KClcbiAgdGFnczogQm9vbGVhbjtcbiAgQElucHV0KClcbiAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgQElucHV0KClcbiAgb3B0aW9uczogYW55O1xuICBASW5wdXQoKVxuICBpZDogbnVtYmVyO1xuICBASW5wdXQoKVxuICBfdmFsdWU6IGFueVtdO1xuICBASW5wdXQoKVxuICBpc0NsZWFyOiBCb29sZWFuO1xuICBASW5wdXQoKVxuICBpc1NlbGVjdEFsbDogQm9vbGVhbjtcbiAgQElucHV0KClcbiAgc2VsZWN0QnRuVGV4dDogc3RyaW5nO1xuICBASW5wdXQoKVxuICBjbGVhckJ0blRleHQ6IHN0cmluZztcbiAgQElucHV0KCkgaXNEaXNhYmxlZDogQm9vbGVhbjtcblxuICBkZWZhdWx0VmFsdWUgPSBbXTtcblxuICBwcml2YXRlIGRpc2FibGVkOiBib29sZWFuO1xuICBwcml2YXRlIG9uQ2hhbmdlOiBGdW5jdGlvbjtcbiAgcHJpdmF0ZSBvblRvdWNoZWQ6IEZ1bmN0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIpIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gKHZhbDogYW55KSA9PiB7fTtcbiAgICB0aGlzLm9uVG91Y2hlZCA9ICgpID0+IHt9O1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgfVxuICB3cml0ZVZhbHVlKHZhbDogYW55KTogdm9pZCB7XG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbCkge1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsO1xuICAgIHRoaXMub25DaGFuZ2UodGhpcy5fdmFsdWUpO1xuICB9XG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICB9XG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmFjdGlvblJlbmRlcigpO1xuICAgIH0sIDEpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgaWYgKHRoaXMuaXNDbGVhciA9PT0gdHJ1ZSkge1xuICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKHRoaXMub3B0aW9ucykgJiYgIV8uaXNFbXB0eSh0aGlzLm9wdGlvbnMpKSB7XG4gICAgICAgIF8ubWFwKHRoaXMub3B0aW9ucywgaSA9PiB7XG4gICAgICAgICAgaS5zZWxlY3RlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gW107XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWN0aW9uUmVuZGVyKCk7XG4gICAgICAgIH0sIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFjdGlvblJlbmRlcigpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLWNvbnN0XG4gICAgbGV0ICR0aGlzID0gdGhpcztcblxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpwcmVmZXItY29uc3RcbiAgICBsZXQgb3B0aW9uczogYW55ID0ge307XG4gICAgaWYgKHRoaXMudGFncyAhPT0gdW5kZWZpbmVkICYmIHRoaXMudGFncyAhPSBudWxsKSB7XG4gICAgICBvcHRpb25zLnRhZ3MgPSB0aGlzLnRhZ3M7XG4gICAgfVxuICAgIGlmICh0aGlzLmlzRGlzYWJsZWQgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmlzRGlzYWJsZWQgIT0gbnVsbCAmJiB0aGlzLmlzRGlzYWJsZWQgPT09IHRydWUpIHtcbiAgICAgIG9wdGlvbnMuZGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5wbGFjZWhvbGRlciAhPT0gdW5kZWZpbmVkICYmIHRoaXMucGxhY2Vob2xkZXIgIT0gbnVsbCkge1xuICAgICAgb3B0aW9ucy5wbGFjZWhvbGRlciA9IHRoaXMucGxhY2Vob2xkZXI7XG4gICAgfVxuICAgICQoJyNzZWxlY3QyLXJlYWN0aXZlLWZvcm0tJyArIHRoaXMuaWQpLnNlbGVjdDIob3B0aW9ucyk7XG5cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLWNvbnN0XG4gICAgbGV0IG9sZERhdGEgPSAkKCcjc2VsZWN0Mi1yZWFjdGl2ZS1mb3JtLScgKyB0aGlzLmlkKS5zZWxlY3QyKCdkYXRhJyk7XG4gICAgaWYgKG9sZERhdGEgIT0gbnVsbCAmJiBvbGREYXRhICE9PSB1bmRlZmluZWQgJiYgIV8uaXNFbXB0eShvbGREYXRhKSkge1xuICAgICAgXy5mb3JFYWNoKG9sZERhdGEsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICR0aGlzLmRlZmF1bHRWYWx1ZS5wdXNoKHZhbHVlLmlkKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuZGVmYXVsdFZhbHVlO1xuICAgIH1cblxuICAgICQoJyNzZWxlY3QyLXJlYWN0aXZlLWZvcm0tJyArIHRoaXMuaWQpLmNoYW5nZShmdW5jdGlvbigpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpwcmVmZXItY29uc3RcbiAgICAgIGxldCB2YWx1ZSA9ICQodGhpcykudmFsKCk7XG4gICAgICAkdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgc2VsZWN0ZWRBbGwoKSB7XG4gICAgXy5tYXAodGhpcy5vcHRpb25zLCBpID0+IHtcbiAgICAgIGkuc2VsZWN0ZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSBbXTtcbiAgICAgIHRoaXMuYWN0aW9uUmVuZGVyKCk7XG4gICAgfSwgMSk7XG4gIH1cblxuICBjbGVhckFsbCgpIHtcbiAgICBfLm1hcCh0aGlzLm9wdGlvbnMsIGkgPT4ge1xuICAgICAgZGVsZXRlIGlbJ3NlbGVjdGVkJ107XG4gICAgfSk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IFtdO1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuZGVmYXVsdFZhbHVlO1xuICAgICAgdGhpcy5hY3Rpb25SZW5kZXIoKTtcbiAgICB9LCAxKTtcbiAgfVxufVxuIl19