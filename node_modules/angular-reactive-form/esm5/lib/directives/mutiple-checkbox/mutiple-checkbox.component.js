/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef, Renderer } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as _ from 'lodash';
var MutipleCheckboxComponent = /** @class */ (function () {
    function MutipleCheckboxComponent(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.checkedList = [];
        this.onChange = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { });
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    MutipleCheckboxComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            this.value = val;
        }
    };
    Object.defineProperty(MutipleCheckboxComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.selected = _.find(this.options, (/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.value === val; }));
            this._value = val;
            this.onChange(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    MutipleCheckboxComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MutipleCheckboxComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    MutipleCheckboxComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    // tslint:disable-next-line:use-life-cycle-interface
    // tslint:disable-next-line:use-life-cycle-interface
    /**
     * @return {?}
     */
    MutipleCheckboxComponent.prototype.ngOnInit = 
    // tslint:disable-next-line:use-life-cycle-interface
    /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    MutipleCheckboxComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.isClear === true) {
                if (!_.isUndefined(_this.options) && !_.isEmpty(_this.options)) {
                    _.map(_this.options, (/**
                     * @param {?} i
                     * @return {?}
                     */
                    function (i) {
                        i.checked = undefined;
                    }));
                    _this.checkedList = [];
                    _this.value = _this.checkedList;
                }
            }
        }), 2);
    };
    /**
     * @return {?}
     */
    MutipleCheckboxComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.options !== null && _this.options !== undefined && !_.isEmpty(_this.options)) {
                /** @type {?} */
                var $this_1 = _this;
                _.forEach(_this.options, (/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (value.checked === true) {
                        $this_1.checkedList.push(value.value);
                    }
                }));
                _this.value = _this.checkedList;
            }
            _this.value = _this.checkedList;
        }), 1);
    };
    /**
     * @param {?} option
     * @param {?} event
     * @return {?}
     */
    MutipleCheckboxComponent.prototype.onCheckboxChange = /**
     * @param {?} option
     * @param {?} event
     * @return {?}
     */
    function (option, event) {
        if (event.target.checked) {
            this.checkedList.push(option.value);
        }
        else {
            for (var i = 0; i < this.options.length; i++) {
                if (this.checkedList[i] === option.value) {
                    this.checkedList.splice(i, 1);
                }
            }
        }
        this.value = this.checkedList;
    };
    MutipleCheckboxComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'mutiple-checkbox',
                    template: "<div class=\"checkbox\" *ngFor=\"let list of options\">\n  <label *ngIf=\"isDisabled\"> <input disabled type=\"checkbox\" value=\"{{list.value}}\" [attr.checked]=\"list.checked === true ? 'checked' : null\" (change)=\"onCheckboxChange(list, $event)\" />{{ list.label }}</label>\n  <label *ngIf=\"!isDisabled\"> <input type=\"checkbox\" value=\"{{list.value}}\" [attr.checked]=\"list.checked === true ? 'checked' : null\" (change)=\"onCheckboxChange(list, $event)\" />{{ list.label }}</label>\n</div>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return MutipleCheckboxComponent; })),
                            multi: true
                        }
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MutipleCheckboxComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer }
    ]; };
    MutipleCheckboxComponent.propDecorators = {
        options: [{ type: Input }],
        _value: [{ type: Input }],
        isDisabled: [{ type: Input }],
        isClear: [{ type: Input }]
    };
    return MutipleCheckboxComponent;
}());
export { MutipleCheckboxComponent };
if (false) {
    /** @type {?} */
    MutipleCheckboxComponent.prototype.options;
    /** @type {?} */
    MutipleCheckboxComponent.prototype._value;
    /** @type {?} */
    MutipleCheckboxComponent.prototype.isDisabled;
    /** @type {?} */
    MutipleCheckboxComponent.prototype.isClear;
    /** @type {?} */
    MutipleCheckboxComponent.prototype.checkedList;
    /** @type {?} */
    MutipleCheckboxComponent.prototype.selected;
    /**
     * @type {?}
     * @private
     */
    MutipleCheckboxComponent.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    MutipleCheckboxComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    MutipleCheckboxComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    MutipleCheckboxComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    MutipleCheckboxComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,