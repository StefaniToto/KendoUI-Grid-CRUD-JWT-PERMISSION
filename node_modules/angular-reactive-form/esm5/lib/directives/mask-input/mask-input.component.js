/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef, Renderer } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var MaskInputComponent = /** @class */ (function () {
    function MaskInputComponent(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.myModel = '';
        this.onChange = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { });
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    MaskInputComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            this.value = val;
        }
    };
    Object.defineProperty(MaskInputComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
            this.onChange(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    MaskInputComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MaskInputComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    MaskInputComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @return {?}
     */
    MaskInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    MaskInputComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isClear === true) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.value) {
                    _this.value = null;
                    _this.myModel = _this.value;
                }
            }), 1);
        }
    };
    /**
     * @return {?}
     */
    MaskInputComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.value) {
                _this.myModel = _this.value;
            }
        }), 1);
    };
    /**
     * @return {?}
     */
    MaskInputComponent.prototype.change = /**
     * @return {?}
     */
    function () {
        if (this.valueWithCharacter === true) {
            // tslint:disable-next-line:semicolon
            this.value = this.myModel;
        }
        else {
            this.value = this.myModel.replace(/\D+/g, '');
        }
    };
    MaskInputComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'mask-input',
                    template: "<input [attr.disabled]=\"isDisabled\" class=\"form-control\" placeholder=\"{{placeholder}}\" [textMask]=\"{mask: inputMaskText, guide: guide}\" (change)=\"change()\" [(ngModel)]=\"myModel\" type=\"text\"/>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return MaskInputComponent; })),
                            multi: true
                        }
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MaskInputComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer }
    ]; };
    MaskInputComponent.propDecorators = {
        inputMaskText: [{ type: Input }],
        guide: [{ type: Input }],
        _value: [{ type: Input }],
        valueWithCharacter: [{ type: Input }],
        placeholder: [{ type: Input }],
        isClear: [{ type: Input }],
        isDisabled: [{ type: Input }]
    };
    return MaskInputComponent;
}());
export { MaskInputComponent };
if (false) {
    /** @type {?} */
    MaskInputComponent.prototype.inputMaskText;
    /** @type {?} */
    MaskInputComponent.prototype.guide;
    /** @type {?} */
    MaskInputComponent.prototype._value;
    /** @type {?} */
    MaskInputComponent.prototype.valueWithCharacter;
    /** @type {?} */
    MaskInputComponent.prototype.placeholder;
    /** @type {?} */
    MaskInputComponent.prototype.isClear;
    /** @type {?} */
    MaskInputComponent.prototype.isDisabled;
    /** @type {?} */
    MaskInputComponent.prototype.myModel;
    /** @type {?} */
    MaskInputComponent.prototype.selected;
    /**
     * @type {?}
     * @private
     */
    MaskInputComponent.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    MaskInputComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    MaskInputComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    MaskInputComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    MaskInputComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzay1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXJlYWN0aXZlLWZvcm0vIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9tYXNrLWlucHV0L21hc2staW5wdXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFDckgsT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3pFO0lBMkJFLDRCQUFvQixPQUFtQixFQUFVLFFBQWtCO1FBQS9DLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBTDVELFlBQU8sR0FBRyxFQUFFLENBQUM7UUFNbEIsSUFBSSxDQUFDLFFBQVE7Ozs7UUFBRyxVQUFDLEdBQVEsSUFBTSxDQUFDLENBQUEsQ0FBQztRQUNqQyxJQUFJLENBQUMsU0FBUzs7O1FBQUcsY0FBTyxDQUFDLENBQUEsQ0FBQztRQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUN4QixDQUFDOzs7OztJQUVELHVDQUFVOzs7O0lBQVYsVUFBVyxHQUFRO1FBQ2pCLElBQUksR0FBRyxFQUFFO1lBQ1AsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBRUQsc0JBQUkscUNBQUs7Ozs7UUFBVDtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQixDQUFDOzs7OztRQUVELFVBQVUsR0FBRztZQUNYLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLENBQUM7OztPQUxBOzs7OztJQU1ELDZDQUFnQjs7OztJQUFoQixVQUFpQixFQUFPO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7Ozs7O0lBRUQsOENBQWlCOzs7O0lBQWpCLFVBQWtCLEVBQU87UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7Ozs7SUFFRCw2Q0FBZ0I7Ozs7SUFBaEIsVUFBaUIsVUFBbUI7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELHFDQUFROzs7SUFBUixjQUFZLENBQUM7Ozs7SUFFYix3Q0FBVzs7O0lBQVg7UUFBQSxpQkFTQztRQVJDLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJLEVBQUU7WUFDekIsVUFBVTs7O1lBQUM7Z0JBQ1QsSUFBSSxLQUFJLENBQUMsS0FBSyxFQUFFO29CQUNkLEtBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO29CQUNsQixLQUFJLENBQUMsT0FBTyxHQUFHLEtBQUksQ0FBQyxLQUFLLENBQUM7aUJBQzNCO1lBQ0gsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ1A7SUFDSCxDQUFDOzs7O0lBRUQsNENBQWU7OztJQUFmO1FBQUEsaUJBTUM7UUFMQyxVQUFVOzs7UUFBQztZQUNULElBQUksS0FBSSxDQUFDLEtBQUssRUFBRTtnQkFDZCxLQUFJLENBQUMsT0FBTyxHQUFHLEtBQUksQ0FBQyxLQUFLLENBQUM7YUFDM0I7UUFDSCxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUM7SUFDUixDQUFDOzs7O0lBQ0QsbUNBQU07OztJQUFOO1FBQ0UsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEtBQUssSUFBSSxFQUFFO1lBQ3BDLHFDQUFxQztZQUNyQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDM0I7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQy9DO0lBQ0gsQ0FBQzs7Z0JBdEZGLFNBQVMsU0FBQzs7b0JBRVQsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLDJOQUEwQztvQkFFMUMsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxVQUFVOzs7NEJBQUMsY0FBTSxPQUFBLGtCQUFrQixFQUFsQixDQUFrQixFQUFDOzRCQUNqRCxLQUFLLEVBQUUsSUFBSTt5QkFDWjtxQkFDRjs7aUJBQ0Y7Ozs7Z0JBaEI4QyxVQUFVO2dCQUFFLFFBQVE7OztnQ0FtQmhFLEtBQUs7d0JBQ0wsS0FBSzt5QkFDTCxLQUFLO3FDQUNMLEtBQUs7OEJBQ0wsS0FBSzswQkFDTCxLQUFLOzZCQUNMLEtBQUs7O0lBb0VSLHlCQUFDO0NBQUEsQUF6RkQsSUF5RkM7U0E1RVksa0JBQWtCOzs7SUFFN0IsMkNBQXVCOztJQUN2QixtQ0FBd0I7O0lBQ3hCLG9DQUF3Qjs7SUFDeEIsZ0RBQXFDOztJQUNyQyx5Q0FBNkI7O0lBQzdCLHFDQUEwQjs7SUFDMUIsd0NBQTZCOztJQUM3QixxQ0FBb0I7O0lBQ3BCLHNDQUFnQjs7Ozs7SUFDaEIsc0NBQTBCOzs7OztJQUMxQixzQ0FBMkI7Ozs7O0lBQzNCLHVDQUE0Qjs7Ozs7SUFDaEIscUNBQTJCOzs7OztJQUFFLHNDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgZm9yd2FyZFJlZiwgRWxlbWVudFJlZiwgUmVuZGVyZXIsIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ21hc2staW5wdXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vbWFzay1pbnB1dC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL21hc2staW5wdXQuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBNYXNrSW5wdXRDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTWFza0lucHV0Q29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0IHtcbiAgLy8gQElucHV0KCkgaW5wdXRNYXNrVGV4dDogW107XG4gIEBJbnB1dCgpIGlucHV0TWFza1RleHQ7XG4gIEBJbnB1dCgpIGd1aWRlOiBib29sZWFuO1xuICBASW5wdXQoKSBfdmFsdWU6IHN0cmluZztcbiAgQElucHV0KCkgdmFsdWVXaXRoQ2hhcmFjdGVyOiBib29sZWFuO1xuICBASW5wdXQoKSBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICBASW5wdXQoKSBpc0NsZWFyOiBCb29sZWFuO1xuICBASW5wdXQoKSBpc0Rpc2FibGVkOiBCb29sZWFuO1xuICBwdWJsaWMgbXlNb2RlbCA9ICcnO1xuICBwdWJsaWMgc2VsZWN0ZWQ7XG4gIHByaXZhdGUgZGlzYWJsZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgb25DaGFuZ2U6IEZ1bmN0aW9uO1xuICBwcml2YXRlIG9uVG91Y2hlZDogRnVuY3Rpb247XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIpIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gKHZhbDogYW55KSA9PiB7fTtcbiAgICB0aGlzLm9uVG91Y2hlZCA9ICgpID0+IHt9O1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUodmFsKSB7XG4gICAgdGhpcy5fdmFsdWUgPSB2YWw7XG4gICAgdGhpcy5vbkNoYW5nZSh0aGlzLl92YWx1ZSk7XG4gIH1cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgfVxuXG4gIG5nT25Jbml0KCkge31cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICBpZiAodGhpcy5pc0NsZWFyID09PSB0cnVlKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICAgICAgICB0aGlzLm15TW9kZWwgPSB0aGlzLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LCAxKTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy52YWx1ZSkge1xuICAgICAgICB0aGlzLm15TW9kZWwgPSB0aGlzLnZhbHVlO1xuICAgICAgfVxuICAgIH0sIDEpO1xuICB9XG4gIGNoYW5nZSgpIHtcbiAgICBpZiAodGhpcy52YWx1ZVdpdGhDaGFyYWN0ZXIgPT09IHRydWUpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzZW1pY29sb25cbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm15TW9kZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm15TW9kZWwucmVwbGFjZSgvXFxEKy9nLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RleHQtbWFzay90ZXh0LW1hc2svYmxvYi9tYXN0ZXIvY29tcG9uZW50RG9jdW1lbnRhdGlvbi5tZCNyZWFkbWVcbn1cbiJdfQ==