/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef, Renderer, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var CustomDateTimePickerComponent = /** @class */ (function () {
    function CustomDateTimePickerComponent(cdRef, element, renderer) {
        this.cdRef = cdRef;
        this.element = element;
        this.renderer = renderer;
        this.onChange = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { });
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    CustomDateTimePickerComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            this.value = val;
        }
    };
    Object.defineProperty(CustomDateTimePickerComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
            this.onChange(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    CustomDateTimePickerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    CustomDateTimePickerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    CustomDateTimePickerComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @return {?}
     */
    CustomDateTimePickerComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isClear === true) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.value = null;
            }), 1);
        }
    };
    /**
     * @return {?}
     */
    CustomDateTimePickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.en = {
            firstDayOfWeek: 0,
            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
            // tslint:disable-next-line:max-line-length
            monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            today: 'Today',
            clear: 'Clear'
        };
        this.tr = {
            firstDayOfWeek: 1
        };
        /** @type {?} */
        var today = new Date();
        /** @type {?} */
        var month = today.getMonth();
        /** @type {?} */
        var year = today.getFullYear();
        /** @type {?} */
        var prevMonth = month === 0 ? 11 : month - 1;
        /** @type {?} */
        var prevYear = prevMonth === 11 ? year - 1 : year;
        /** @type {?} */
        var nextMonth = month === 11 ? 0 : month + 1;
        /** @type {?} */
        var nextYear = nextMonth === 0 ? year + 1 : year;
        // this.minDate = new Date('11/05/2018');
        // this.minDate.setMonth(prevMonth);
        // this.minDate.setFullYear(prevYear);
        // this.maxDate = new Date('11/10/2018');
        // this.maxDate.setMonth(nextMonth);
        // this.maxDate.setFullYear(nextYear);
        /** @type {?} */
        var invalidDate = new Date();
        invalidDate.setDate(today.getDate() - 1);
        this.invalidDates = [today, invalidDate];
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CustomDateTimePickerComponent.prototype.change = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    CustomDateTimePickerComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'custom-date-time-picker',
                    template: "<p-calendar\n  [(ngModel)]=\"value\"\n  [showIcon]=\"showIcon\"\n  [monthNavigator]=\"monthNavigator\"\n  [yearNavigator]=\"yearNavigator\"\n  yearRange=\"{{yearRange}}\"\n  [showTime]=\"showTime\"\n  [timeOnly]=\"timeOnly\"\n  dateFormat=\"{{dateFormat}}\"\n  (onSelect)=\"change(value)\"\n  [disabled]=\"isDisabled\"\n  showButtonBar=\"true\"\n  [minDate]=\"minDate\"\n  [maxDate]=\"maxDate\"\n>\n</p-calendar>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return CustomDateTimePickerComponent; })),
                            multi: true
                        }
                    ],
                    styles: [".reset-button{border-radius:3px;color:#fff;font-size:12px;padding:5px 10px;background-color:brown;display:inline;border:none;cursor:pointer}.reset-button:hover{background-color:#7c2020}"]
                }] }
    ];
    /** @nocollapse */
    CustomDateTimePickerComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: Renderer }
    ]; };
    CustomDateTimePickerComponent.propDecorators = {
        _value: [{ type: Input }],
        showIcon: [{ type: Input }],
        monthNavigator: [{ type: Input }],
        yearNavigator: [{ type: Input }],
        yearRange: [{ type: Input }],
        showTime: [{ type: Input }],
        timeOnly: [{ type: Input }],
        dateFormat: [{ type: Input }],
        isDisabled: [{ type: Input }],
        minDate: [{ type: Input }],
        maxDate: [{ type: Input }],
        isClear: [{ type: Input }]
    };
    return CustomDateTimePickerComponent;
}());
export { CustomDateTimePickerComponent };
if (false) {
    /** @type {?} */
    CustomDateTimePickerComponent.prototype._value;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.showIcon;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.monthNavigator;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.yearNavigator;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.yearRange;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.showTime;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.timeOnly;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.dateFormat;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.isDisabled;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.minDate;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.maxDate;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.isClear;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.dates;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.rangeDates;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.en;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.tr;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.invalidDates;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWRhdGUtdGltZS1waWNrZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1yZWFjdGl2ZS1mb3JtLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY3VzdG9tLWRhdGUtdGltZS1waWNrZXIvY3VzdG9tLWRhdGUtdGltZS1waWNrZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN6SCxPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHekU7SUErQ0UsdUNBQW9CLEtBQXdCLEVBQVUsT0FBbUIsRUFBVSxRQUFrQjtRQUFqRixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ25HLElBQUksQ0FBQyxRQUFROzs7O1FBQUcsVUFBQyxHQUFRLElBQU0sQ0FBQyxDQUFBLENBQUM7UUFDakMsSUFBSSxDQUFDLFNBQVM7OztRQUFHLGNBQU8sQ0FBQyxDQUFBLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFFRCxrREFBVTs7OztJQUFWLFVBQVcsR0FBUTtRQUNqQixJQUFJLEdBQUcsRUFBRTtZQUNQLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVELHNCQUFJLGdEQUFLOzs7O1FBQVQ7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQzs7Ozs7UUFFRCxVQUFVLEdBQUc7WUFDWCxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFN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OztJQUFOLFVBQU8sS0FBSztRQUNWLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7O2dCQTdIRixTQUFTLFNBQUM7O29CQUVULFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLDBhQUF1RDtvQkFFdkQsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxVQUFVOzs7NEJBQUMsY0FBTSxPQUFBLDZCQUE2QixFQUE3QixDQUE2QixFQUFDOzRCQUM1RCxLQUFLLEVBQUUsSUFBSTt5QkFDWjtxQkFDRjs7aUJBQ0Y7Ozs7Z0JBaEJvRSxpQkFBaUI7Z0JBQXZDLFVBQVU7Z0JBQUUsUUFBUTs7O3lCQWtCaEUsS0FBSzsyQkFFTCxLQUFLO2lDQUVMLEtBQUs7Z0NBQ0wsS0FBSzs0QkFDTCxLQUFLOzJCQUNMLEtBQUs7MkJBQ0wsS0FBSzs2QkFDTCxLQUFLOzZCQUNMLEtBQUs7MEJBQ0wsS0FBSzswQkFDTCxLQUFLOzBCQUNMLEtBQUs7O0lBbUdSLG9DQUFDO0NBQUEsQUE5SEQsSUE4SEM7U0FqSFksNkJBQTZCOzs7SUFDeEMsK0NBQXNCOztJQUV0QixpREFBMkI7O0lBRTNCLHVEQUFpQzs7SUFDakMsc0RBQWdDOztJQUNoQyxrREFBMkI7O0lBQzNCLGlEQUEyQjs7SUFDM0IsaURBQTJCOztJQUMzQixtREFBNEI7O0lBQzVCLG1EQUE2Qjs7SUFDN0IsZ0RBQXVCOztJQUN2QixnREFBdUI7O0lBQ3ZCLGdEQUEwQjs7SUFFMUIsOENBQWM7O0lBRWQsbURBQW1COztJQU1uQiwyQ0FBUTs7SUFFUiwyQ0FBUTs7SUFFUixxREFBMEI7Ozs7O0lBRTFCLGlEQUEwQjs7Ozs7SUFDMUIsaURBQTJCOzs7OztJQUMzQixrREFBNEI7Ozs7O0lBRWhCLDhDQUFnQzs7Ozs7SUFBRSxnREFBMkI7Ozs7O0lBQUUsaURBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBmb3J3YXJkUmVmLCBFbGVtZW50UmVmLCBSZW5kZXJlciwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ2N1c3RvbS1kYXRlLXRpbWUtcGlja2VyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2N1c3RvbS1kYXRlLXRpbWUtcGlja2VyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vY3VzdG9tLWRhdGUtdGltZS1waWNrZXIuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBDdXN0b21EYXRlVGltZVBpY2tlckNvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBDdXN0b21EYXRlVGltZVBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIF92YWx1ZTogRGF0ZTtcblxuICBASW5wdXQoKSBzaG93SWNvbjogQm9vbGVhbjtcblxuICBASW5wdXQoKSBtb250aE5hdmlnYXRvcjogQm9vbGVhbjtcbiAgQElucHV0KCkgeWVhck5hdmlnYXRvcjogQm9vbGVhbjtcbiAgQElucHV0KCkgeWVhclJhbmdlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHNob3dUaW1lOiBCb29sZWFuO1xuICBASW5wdXQoKSB0aW1lT25seTogQm9vbGVhbjtcbiAgQElucHV0KCkgZGF0ZUZvcm1hdDogc3RyaW5nO1xuICBASW5wdXQoKSBpc0Rpc2FibGVkOiBCb29sZWFuO1xuICBASW5wdXQoKSBtaW5EYXRlOiBEYXRlO1xuICBASW5wdXQoKSBtYXhEYXRlOiBEYXRlO1xuICBASW5wdXQoKSBpc0NsZWFyOiBCb29sZWFuO1xuXG4gIGRhdGVzOiBEYXRlW107XG5cbiAgcmFuZ2VEYXRlczogRGF0ZVtdO1xuXG4gIC8vIG1pbkRhdGU6IERhdGU7XG5cbiAgLy8gbWF4RGF0ZTogRGF0ZTtcblxuICBlbjogYW55O1xuXG4gIHRyOiBhbnk7XG5cbiAgaW52YWxpZERhdGVzOiBBcnJheTxEYXRlPjtcblxuICBwcml2YXRlIGRpc2FibGVkOiBib29sZWFuO1xuICBwcml2YXRlIG9uQ2hhbmdlOiBGdW5jdGlvbjtcbiAgcHJpdmF0ZSBvblRvdWNoZWQ6IEZ1bmN0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyKSB7XG4gICAgdGhpcy5vbkNoYW5nZSA9ICh2YWw6IGFueSkgPT4ge307XG4gICAgdGhpcy5vblRvdWNoZWQgPSAoKSA9PiB7fTtcbiAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbDogYW55KTogdm9pZCB7XG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbCkge1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsO1xuICAgIHRoaXMub25DaGFuZ2UodGhpcy5fdmFsdWUpO1xuICB9XG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICB9XG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gIH1cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICBpZiAodGhpcy5pc0NsZWFyID09PSB0cnVlKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IG51bGw7XG4gICAgICB9LCAxKTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmVuID0ge1xuICAgICAgZmlyc3REYXlPZldlZWs6IDAsXG4gICAgICBkYXlOYW1lczogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddLFxuICAgICAgZGF5TmFtZXNTaG9ydDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgICAgIGRheU5hbWVzTWluOiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG4gICAgICBtb250aE5hbWVzOiBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXSxcbiAgICAgIG1vbnRoTmFtZXNTaG9ydDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICAgICAgdG9kYXk6ICdUb2RheScsXG4gICAgICBjbGVhcjogJ0NsZWFyJ1xuICAgIH07XG5cbiAgICB0aGlzLnRyID0ge1xuICAgICAgZmlyc3REYXlPZldlZWs6IDFcbiAgICB9O1xuXG4gICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IG1vbnRoID0gdG9kYXkuZ2V0TW9udGgoKTtcbiAgICBjb25zdCB5ZWFyID0gdG9kYXkuZ2V0RnVsbFllYXIoKTtcbiAgICBjb25zdCBwcmV2TW9udGggPSBtb250aCA9PT0gMCA/IDExIDogbW9udGggLSAxO1xuICAgIGNvbnN0IHByZXZZZWFyID0gcHJldk1vbnRoID09PSAxMSA/IHllYXIgLSAxIDogeWVhcjtcbiAgICBjb25zdCBuZXh0TW9udGggPSBtb250aCA9PT0gMTEgPyAwIDogbW9udGggKyAxO1xuICAgIGNvbnN0IG5leHRZZWFyID0gbmV4dE1vbnRoID09PSAwID8geWVhciArIDEgOiB5ZWFyO1xuICAgIC8vIHRoaXMubWluRGF0ZSA9IG5ldyBEYXRlKCcxMS8wNS8yMDE4Jyk7XG4gICAgLy8gdGhpcy5taW5EYXRlLnNldE1vbnRoKHByZXZNb250aCk7XG4gICAgLy8gdGhpcy5taW5EYXRlLnNldEZ1bGxZZWFyKHByZXZZZWFyKTtcbiAgICAvLyB0aGlzLm1heERhdGUgPSBuZXcgRGF0ZSgnMTEvMTAvMjAxOCcpO1xuICAgIC8vIHRoaXMubWF4RGF0ZS5zZXRNb250aChuZXh0TW9udGgpO1xuICAgIC8vIHRoaXMubWF4RGF0ZS5zZXRGdWxsWWVhcihuZXh0WWVhcik7XG5cbiAgICBjb25zdCBpbnZhbGlkRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgaW52YWxpZERhdGUuc2V0RGF0ZSh0b2RheS5nZXREYXRlKCkgLSAxKTtcbiAgICB0aGlzLmludmFsaWREYXRlcyA9IFt0b2RheSwgaW52YWxpZERhdGVdO1xuICB9XG5cbiAgY2hhbmdlKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG59XG5cbi8vIGh0dHBzOi8vd3d3LnByaW1lZmFjZXMub3JnL3ByaW1lbmcvIy9jYWxlbmRhclxuIl19