/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef, Renderer } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as _ from 'lodash';
export class MutipleCheckboxComponent {
    /**
     * @param {?} element
     * @param {?} renderer
     */
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.checkedList = [];
        this.onChange = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => { });
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (val) {
            this.value = val;
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this.selected = _.find(this.options, (/**
         * @param {?} item
         * @return {?}
         */
        item => item.value === val));
        this._value = val;
        this.onChange(this._value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    // tslint:disable-next-line:use-life-cycle-interface
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngOnChanges() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.isClear === true) {
                if (!_.isUndefined(this.options) && !_.isEmpty(this.options)) {
                    _.map(this.options, (/**
                     * @param {?} i
                     * @return {?}
                     */
                    i => {
                        i.checked = undefined;
                    }));
                    this.checkedList = [];
                    this.value = this.checkedList;
                }
            }
        }), 2);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.options !== null && this.options !== undefined && !_.isEmpty(this.options)) {
                /** @type {?} */
                const $this = this;
                _.forEach(this.options, (/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (value.checked === true) {
                        $this.checkedList.push(value.value);
                    }
                }));
                this.value = this.checkedList;
            }
            this.value = this.checkedList;
        }), 1);
    }
    /**
     * @param {?} option
     * @param {?} event
     * @return {?}
     */
    onCheckboxChange(option, event) {
        if (event.target.checked) {
            this.checkedList.push(option.value);
        }
        else {
            for (let i = 0; i < this.options.length; i++) {
                if (this.checkedList[i] === option.value) {
                    this.checkedList.splice(i, 1);
                }
            }
        }
        this.value = this.checkedList;
    }
}
MutipleCheckboxComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'mutiple-checkbox',
                template: "<div class=\"checkbox\" *ngFor=\"let list of options\">\n  <label *ngIf=\"isDisabled\"> <input disabled type=\"checkbox\" value=\"{{list.value}}\" [attr.checked]=\"list.checked === true ? 'checked' : null\" (change)=\"onCheckboxChange(list, $event)\" />{{ list.label }}</label>\n  <label *ngIf=\"!isDisabled\"> <input type=\"checkbox\" value=\"{{list.value}}\" [attr.checked]=\"list.checked === true ? 'checked' : null\" (change)=\"onCheckboxChange(list, $event)\" />{{ list.label }}</label>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => MutipleCheckboxComponent)),
                        multi: true
                    }
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
MutipleCheckboxComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer }
];
MutipleCheckboxComponent.propDecorators = {
    options: [{ type: Input }],
    _value: [{ type: Input }],
    isDisabled: [{ type: Input }],
    isClear: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MutipleCheckboxComponent.prototype.options;
    /** @type {?} */
    MutipleCheckboxComponent.prototype._value;
    /** @type {?} */
    MutipleCheckboxComponent.prototype.isDisabled;
    /** @type {?} */
    MutipleCheckboxComponent.prototype.isClear;
    /** @type {?} */
    MutipleCheckboxComponent.prototype.checkedList;
    /** @type {?} */
    MutipleCheckboxComponent.prototype.selected;
    /**
     * @type {?}
     * @private
     */
    MutipleCheckboxComponent.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    MutipleCheckboxComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    MutipleCheckboxComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    MutipleCheckboxComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    MutipleCheckboxComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,