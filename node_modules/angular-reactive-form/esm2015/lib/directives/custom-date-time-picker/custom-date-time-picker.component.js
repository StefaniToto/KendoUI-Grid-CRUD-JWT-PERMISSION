/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef, Renderer, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class CustomDateTimePickerComponent {
    /**
     * @param {?} cdRef
     * @param {?} element
     * @param {?} renderer
     */
    constructor(cdRef, element, renderer) {
        this.cdRef = cdRef;
        this.element = element;
        this.renderer = renderer;
        this.onChange = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => { });
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (val) {
            this.value = val;
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.onChange(this._value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.isClear === true) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.value = null;
            }), 1);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.en = {
            firstDayOfWeek: 0,
            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
            // tslint:disable-next-line:max-line-length
            monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            today: 'Today',
            clear: 'Clear'
        };
        this.tr = {
            firstDayOfWeek: 1
        };
        /** @type {?} */
        const today = new Date();
        /** @type {?} */
        const month = today.getMonth();
        /** @type {?} */
        const year = today.getFullYear();
        /** @type {?} */
        const prevMonth = month === 0 ? 11 : month - 1;
        /** @type {?} */
        const prevYear = prevMonth === 11 ? year - 1 : year;
        /** @type {?} */
        const nextMonth = month === 11 ? 0 : month + 1;
        /** @type {?} */
        const nextYear = nextMonth === 0 ? year + 1 : year;
        // this.minDate = new Date('11/05/2018');
        // this.minDate.setMonth(prevMonth);
        // this.minDate.setFullYear(prevYear);
        // this.maxDate = new Date('11/10/2018');
        // this.maxDate.setMonth(nextMonth);
        // this.maxDate.setFullYear(nextYear);
        /** @type {?} */
        const invalidDate = new Date();
        invalidDate.setDate(today.getDate() - 1);
        this.invalidDates = [today, invalidDate];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    change(value) {
        this.value = value;
    }
}
CustomDateTimePickerComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'custom-date-time-picker',
                template: "<p-calendar\n  [(ngModel)]=\"value\"\n  [showIcon]=\"showIcon\"\n  [monthNavigator]=\"monthNavigator\"\n  [yearNavigator]=\"yearNavigator\"\n  yearRange=\"{{yearRange}}\"\n  [showTime]=\"showTime\"\n  [timeOnly]=\"timeOnly\"\n  dateFormat=\"{{dateFormat}}\"\n  (onSelect)=\"change(value)\"\n  [disabled]=\"isDisabled\"\n  showButtonBar=\"true\"\n  [minDate]=\"minDate\"\n  [maxDate]=\"maxDate\"\n>\n</p-calendar>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => CustomDateTimePickerComponent)),
                        multi: true
                    }
                ],
                styles: [".reset-button{border-radius:3px;color:#fff;font-size:12px;padding:5px 10px;background-color:brown;display:inline;border:none;cursor:pointer}.reset-button:hover{background-color:#7c2020}"]
            }] }
];
/** @nocollapse */
CustomDateTimePickerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: Renderer }
];
CustomDateTimePickerComponent.propDecorators = {
    _value: [{ type: Input }],
    showIcon: [{ type: Input }],
    monthNavigator: [{ type: Input }],
    yearNavigator: [{ type: Input }],
    yearRange: [{ type: Input }],
    showTime: [{ type: Input }],
    timeOnly: [{ type: Input }],
    dateFormat: [{ type: Input }],
    isDisabled: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    isClear: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CustomDateTimePickerComponent.prototype._value;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.showIcon;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.monthNavigator;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.yearNavigator;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.yearRange;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.showTime;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.timeOnly;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.dateFormat;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.isDisabled;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.minDate;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.maxDate;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.isClear;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.dates;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.rangeDates;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.en;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.tr;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.invalidDates;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWRhdGUtdGltZS1waWNrZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1yZWFjdGl2ZS1mb3JtLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY3VzdG9tLWRhdGUtdGltZS1waWNrZXIvY3VzdG9tLWRhdGUtdGltZS1waWNrZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN6SCxPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFnQnpFLE1BQU0sT0FBTyw2QkFBNkI7Ozs7OztJQWtDeEMsWUFBb0IsS0FBd0IsRUFBVSxPQUFtQixFQUFVLFFBQWtCO1FBQWpGLFVBQUssR0FBTCxLQUFLLENBQW1CO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbkcsSUFBSSxDQUFDLFFBQVE7Ozs7UUFBRyxDQUFDLEdBQVEsRUFBRSxFQUFFLEdBQUUsQ0FBQyxDQUFBLENBQUM7UUFDakMsSUFBSSxDQUFDLFNBQVM7OztRQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQSxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLEdBQVE7UUFDakIsSUFBSSxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztTQUNsQjtJQUNILENBQUM7Ozs7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFRCxJQUFJLEtBQUssQ0FBQyxHQUFHO1FBQ1gsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7UUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFDRCxnQkFBZ0IsQ0FBQyxFQUFPO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7Ozs7O0lBRUQsaUJBQWlCLENBQUMsRUFBTztRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDOzs7OztJQUVELGdCQUFnQixDQUFDLFVBQW1CO1FBQ2xDLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtZQUN6QixVQUFVOzs7WUFBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDcEIsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ1A7SUFDSCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxFQUFFLEdBQUc7WUFDUixjQUFjLEVBQUUsQ0FBQztZQUNqQixRQUFRLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUM7WUFDeEYsYUFBYSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDO1lBQ2hFLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQzs7WUFFdkQsVUFBVSxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUM7WUFDdEksZUFBZSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7WUFDckcsS0FBSyxFQUFFLE9BQU87WUFDZCxLQUFLLEVBQUUsT0FBTztTQUNmLENBQUM7UUFFRixJQUFJLENBQUMsRUFBRSxHQUFHO1lBQ1IsY0FBYyxFQUFFLENBQUM7U0FDbEIsQ0FBQzs7Y0FFSSxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUU7O2NBQ2xCLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFOztjQUN4QixJQUFJLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRTs7Y0FDMUIsU0FBUyxHQUFHLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUM7O2NBQ3hDLFFBQVEsR0FBRyxTQUFTLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJOztjQUM3QyxTQUFTLEdBQUcsS0FBSyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQzs7Y0FDeEMsUUFBUSxHQUFHLFNBQVMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7Ozs7Ozs7O2NBUTVDLFdBQVcsR0FBRyxJQUFJLElBQUksRUFBRTtRQUM5QixXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzNDLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLEtBQUs7UUFDVixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDOzs7WUE3SEYsU0FBUyxTQUFDOztnQkFFVCxRQUFRLEVBQUUseUJBQXlCO2dCQUNuQywwYUFBdUQ7Z0JBRXZELFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLDZCQUE2QixFQUFDO3dCQUM1RCxLQUFLLEVBQUUsSUFBSTtxQkFDWjtpQkFDRjs7YUFDRjs7OztZQWhCb0UsaUJBQWlCO1lBQXZDLFVBQVU7WUFBRSxRQUFROzs7cUJBa0JoRSxLQUFLO3VCQUVMLEtBQUs7NkJBRUwsS0FBSzs0QkFDTCxLQUFLO3dCQUNMLEtBQUs7dUJBQ0wsS0FBSzt1QkFDTCxLQUFLO3lCQUNMLEtBQUs7eUJBQ0wsS0FBSztzQkFDTCxLQUFLO3NCQUNMLEtBQUs7c0JBQ0wsS0FBSzs7OztJQWJOLCtDQUFzQjs7SUFFdEIsaURBQTJCOztJQUUzQix1REFBaUM7O0lBQ2pDLHNEQUFnQzs7SUFDaEMsa0RBQTJCOztJQUMzQixpREFBMkI7O0lBQzNCLGlEQUEyQjs7SUFDM0IsbURBQTRCOztJQUM1QixtREFBNkI7O0lBQzdCLGdEQUF1Qjs7SUFDdkIsZ0RBQXVCOztJQUN2QixnREFBMEI7O0lBRTFCLDhDQUFjOztJQUVkLG1EQUFtQjs7SUFNbkIsMkNBQVE7O0lBRVIsMkNBQVE7O0lBRVIscURBQTBCOzs7OztJQUUxQixpREFBMEI7Ozs7O0lBQzFCLGlEQUEyQjs7Ozs7SUFDM0Isa0RBQTRCOzs7OztJQUVoQiw4Q0FBZ0M7Ozs7O0lBQUUsZ0RBQTJCOzs7OztJQUFFLGlEQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgZm9yd2FyZFJlZiwgRWxlbWVudFJlZiwgUmVuZGVyZXIsIENoYW5nZURldGVjdG9yUmVmLCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdjdXN0b20tZGF0ZS10aW1lLXBpY2tlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9jdXN0b20tZGF0ZS10aW1lLXBpY2tlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2N1c3RvbS1kYXRlLXRpbWUtcGlja2VyLmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gQ3VzdG9tRGF0ZVRpbWVQaWNrZXJDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQ3VzdG9tRGF0ZVRpbWVQaWNrZXJDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25Jbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBfdmFsdWU6IERhdGU7XG5cbiAgQElucHV0KCkgc2hvd0ljb246IEJvb2xlYW47XG5cbiAgQElucHV0KCkgbW9udGhOYXZpZ2F0b3I6IEJvb2xlYW47XG4gIEBJbnB1dCgpIHllYXJOYXZpZ2F0b3I6IEJvb2xlYW47XG4gIEBJbnB1dCgpIHllYXJSYW5nZTogc3RyaW5nO1xuICBASW5wdXQoKSBzaG93VGltZTogQm9vbGVhbjtcbiAgQElucHV0KCkgdGltZU9ubHk6IEJvb2xlYW47XG4gIEBJbnB1dCgpIGRhdGVGb3JtYXQ6IHN0cmluZztcbiAgQElucHV0KCkgaXNEaXNhYmxlZDogQm9vbGVhbjtcbiAgQElucHV0KCkgbWluRGF0ZTogRGF0ZTtcbiAgQElucHV0KCkgbWF4RGF0ZTogRGF0ZTtcbiAgQElucHV0KCkgaXNDbGVhcjogQm9vbGVhbjtcblxuICBkYXRlczogRGF0ZVtdO1xuXG4gIHJhbmdlRGF0ZXM6IERhdGVbXTtcblxuICAvLyBtaW5EYXRlOiBEYXRlO1xuXG4gIC8vIG1heERhdGU6IERhdGU7XG5cbiAgZW46IGFueTtcblxuICB0cjogYW55O1xuXG4gIGludmFsaWREYXRlczogQXJyYXk8RGF0ZT47XG5cbiAgcHJpdmF0ZSBkaXNhYmxlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBvbkNoYW5nZTogRnVuY3Rpb247XG4gIHByaXZhdGUgb25Ub3VjaGVkOiBGdW5jdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcikge1xuICAgIHRoaXMub25DaGFuZ2UgPSAodmFsOiBhbnkpID0+IHt9O1xuICAgIHRoaXMub25Ub3VjaGVkID0gKCkgPT4ge307XG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWw6IGFueSk6IHZvaWQge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIHNldCB2YWx1ZSh2YWwpIHtcbiAgICB0aGlzLl92YWx1ZSA9IHZhbDtcbiAgICB0aGlzLm9uQ2hhbmdlKHRoaXMuX3ZhbHVlKTtcbiAgfVxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWQgPSBmbjtcbiAgfVxuXG4gIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgaWYgKHRoaXMuaXNDbGVhciA9PT0gdHJ1ZSkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBudWxsO1xuICAgICAgfSwgMSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5lbiA9IHtcbiAgICAgIGZpcnN0RGF5T2ZXZWVrOiAwLFxuICAgICAgZGF5TmFtZXM6IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXSxcbiAgICAgIGRheU5hbWVzU2hvcnQ6IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J10sXG4gICAgICBkYXlOYW1lc01pbjogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxuICAgICAgbW9udGhOYW1lczogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ10sXG4gICAgICBtb250aE5hbWVzU2hvcnQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgICAgIHRvZGF5OiAnVG9kYXknLFxuICAgICAgY2xlYXI6ICdDbGVhcidcbiAgICB9O1xuXG4gICAgdGhpcy50ciA9IHtcbiAgICAgIGZpcnN0RGF5T2ZXZWVrOiAxXG4gICAgfTtcblxuICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBtb250aCA9IHRvZGF5LmdldE1vbnRoKCk7XG4gICAgY29uc3QgeWVhciA9IHRvZGF5LmdldEZ1bGxZZWFyKCk7XG4gICAgY29uc3QgcHJldk1vbnRoID0gbW9udGggPT09IDAgPyAxMSA6IG1vbnRoIC0gMTtcbiAgICBjb25zdCBwcmV2WWVhciA9IHByZXZNb250aCA9PT0gMTEgPyB5ZWFyIC0gMSA6IHllYXI7XG4gICAgY29uc3QgbmV4dE1vbnRoID0gbW9udGggPT09IDExID8gMCA6IG1vbnRoICsgMTtcbiAgICBjb25zdCBuZXh0WWVhciA9IG5leHRNb250aCA9PT0gMCA/IHllYXIgKyAxIDogeWVhcjtcbiAgICAvLyB0aGlzLm1pbkRhdGUgPSBuZXcgRGF0ZSgnMTEvMDUvMjAxOCcpO1xuICAgIC8vIHRoaXMubWluRGF0ZS5zZXRNb250aChwcmV2TW9udGgpO1xuICAgIC8vIHRoaXMubWluRGF0ZS5zZXRGdWxsWWVhcihwcmV2WWVhcik7XG4gICAgLy8gdGhpcy5tYXhEYXRlID0gbmV3IERhdGUoJzExLzEwLzIwMTgnKTtcbiAgICAvLyB0aGlzLm1heERhdGUuc2V0TW9udGgobmV4dE1vbnRoKTtcbiAgICAvLyB0aGlzLm1heERhdGUuc2V0RnVsbFllYXIobmV4dFllYXIpO1xuXG4gICAgY29uc3QgaW52YWxpZERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIGludmFsaWREYXRlLnNldERhdGUodG9kYXkuZ2V0RGF0ZSgpIC0gMSk7XG4gICAgdGhpcy5pbnZhbGlkRGF0ZXMgPSBbdG9kYXksIGludmFsaWREYXRlXTtcbiAgfVxuXG4gIGNoYW5nZSh2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxufVxuXG4vLyBodHRwczovL3d3dy5wcmltZWZhY2VzLm9yZy9wcmltZW5nLyMvY2FsZW5kYXJcbiJdfQ==