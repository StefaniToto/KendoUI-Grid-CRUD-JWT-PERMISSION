/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef, Renderer } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class MaskInputComponent {
    /**
     * @param {?} element
     * @param {?} renderer
     */
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.myModel = '';
        this.onChange = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => { });
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (val) {
            this.value = val;
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.onChange(this._value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.isClear === true) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.value) {
                    this.value = null;
                    this.myModel = this.value;
                }
            }), 1);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.value) {
                this.myModel = this.value;
            }
        }), 1);
    }
    /**
     * @return {?}
     */
    change() {
        if (this.valueWithCharacter === true) {
            // tslint:disable-next-line:semicolon
            this.value = this.myModel;
        }
        else {
            this.value = this.myModel.replace(/\D+/g, '');
        }
    }
}
MaskInputComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'mask-input',
                template: "<input [attr.disabled]=\"isDisabled\" class=\"form-control\" placeholder=\"{{placeholder}}\" [textMask]=\"{mask: inputMaskText, guide: guide}\" (change)=\"change()\" [(ngModel)]=\"myModel\" type=\"text\"/>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => MaskInputComponent)),
                        multi: true
                    }
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
MaskInputComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer }
];
MaskInputComponent.propDecorators = {
    inputMaskText: [{ type: Input }],
    guide: [{ type: Input }],
    _value: [{ type: Input }],
    valueWithCharacter: [{ type: Input }],
    placeholder: [{ type: Input }],
    isClear: [{ type: Input }],
    isDisabled: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MaskInputComponent.prototype.inputMaskText;
    /** @type {?} */
    MaskInputComponent.prototype.guide;
    /** @type {?} */
    MaskInputComponent.prototype._value;
    /** @type {?} */
    MaskInputComponent.prototype.valueWithCharacter;
    /** @type {?} */
    MaskInputComponent.prototype.placeholder;
    /** @type {?} */
    MaskInputComponent.prototype.isClear;
    /** @type {?} */
    MaskInputComponent.prototype.isDisabled;
    /** @type {?} */
    MaskInputComponent.prototype.myModel;
    /** @type {?} */
    MaskInputComponent.prototype.selected;
    /**
     * @type {?}
     * @private
     */
    MaskInputComponent.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    MaskInputComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    MaskInputComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    MaskInputComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    MaskInputComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzay1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXJlYWN0aXZlLWZvcm0vIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9tYXNrLWlucHV0L21hc2staW5wdXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFDckgsT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBZ0J6RSxNQUFNLE9BQU8sa0JBQWtCOzs7OztJQWM3QixZQUFvQixPQUFtQixFQUFVLFFBQWtCO1FBQS9DLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBTDVELFlBQU8sR0FBRyxFQUFFLENBQUM7UUFNbEIsSUFBSSxDQUFDLFFBQVE7Ozs7UUFBRyxDQUFDLEdBQVEsRUFBRSxFQUFFLEdBQUUsQ0FBQyxDQUFBLENBQUM7UUFDakMsSUFBSSxDQUFDLFNBQVM7OztRQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQSxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLEdBQVE7UUFDakIsSUFBSSxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztTQUNsQjtJQUNILENBQUM7Ozs7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFRCxJQUFJLEtBQUssQ0FBQyxHQUFHO1FBQ1gsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7UUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFDRCxnQkFBZ0IsQ0FBQyxFQUFPO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7Ozs7O0lBRUQsaUJBQWlCLENBQUMsRUFBTztRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDOzs7OztJQUVELGdCQUFnQixDQUFDLFVBQW1CO1FBQ2xDLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxRQUFRLEtBQUksQ0FBQzs7OztJQUViLFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxFQUFFO1lBQ3pCLFVBQVU7OztZQUFDLEdBQUcsRUFBRTtnQkFDZCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7b0JBQ2QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7b0JBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztpQkFDM0I7WUFDSCxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUM7U0FDUDtJQUNILENBQUM7Ozs7SUFFRCxlQUFlO1FBQ2IsVUFBVTs7O1FBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNkLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQzthQUMzQjtRQUNILENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7Ozs7SUFDRCxNQUFNO1FBQ0osSUFBSSxJQUFJLENBQUMsa0JBQWtCLEtBQUssSUFBSSxFQUFFO1lBQ3BDLHFDQUFxQztZQUNyQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDM0I7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQy9DO0lBQ0gsQ0FBQzs7O1lBdEZGLFNBQVMsU0FBQzs7Z0JBRVQsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLDJOQUEwQztnQkFFMUMsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE9BQU8sRUFBRSxpQkFBaUI7d0JBQzFCLFdBQVcsRUFBRSxVQUFVOzs7d0JBQUMsR0FBRyxFQUFFLENBQUMsa0JBQWtCLEVBQUM7d0JBQ2pELEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGOzthQUNGOzs7O1lBaEI4QyxVQUFVO1lBQUUsUUFBUTs7OzRCQW1CaEUsS0FBSztvQkFDTCxLQUFLO3FCQUNMLEtBQUs7aUNBQ0wsS0FBSzswQkFDTCxLQUFLO3NCQUNMLEtBQUs7eUJBQ0wsS0FBSzs7OztJQU5OLDJDQUF1Qjs7SUFDdkIsbUNBQXdCOztJQUN4QixvQ0FBd0I7O0lBQ3hCLGdEQUFxQzs7SUFDckMseUNBQTZCOztJQUM3QixxQ0FBMEI7O0lBQzFCLHdDQUE2Qjs7SUFDN0IscUNBQW9COztJQUNwQixzQ0FBZ0I7Ozs7O0lBQ2hCLHNDQUEwQjs7Ozs7SUFDMUIsc0NBQTJCOzs7OztJQUMzQix1Q0FBNEI7Ozs7O0lBQ2hCLHFDQUEyQjs7Ozs7SUFBRSxzQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIGZvcndhcmRSZWYsIEVsZW1lbnRSZWYsIFJlbmRlcmVyLCBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdtYXNrLWlucHV0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL21hc2staW5wdXQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9tYXNrLWlucHV0LmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTWFza0lucHV0Q29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE1hc2tJbnB1dENvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XG4gIC8vIEBJbnB1dCgpIGlucHV0TWFza1RleHQ6IFtdO1xuICBASW5wdXQoKSBpbnB1dE1hc2tUZXh0O1xuICBASW5wdXQoKSBndWlkZTogYm9vbGVhbjtcbiAgQElucHV0KCkgX3ZhbHVlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHZhbHVlV2l0aENoYXJhY3RlcjogYm9vbGVhbjtcbiAgQElucHV0KCkgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgQElucHV0KCkgaXNDbGVhcjogQm9vbGVhbjtcbiAgQElucHV0KCkgaXNEaXNhYmxlZDogQm9vbGVhbjtcbiAgcHVibGljIG15TW9kZWwgPSAnJztcbiAgcHVibGljIHNlbGVjdGVkO1xuICBwcml2YXRlIGRpc2FibGVkOiBib29sZWFuO1xuICBwcml2YXRlIG9uQ2hhbmdlOiBGdW5jdGlvbjtcbiAgcHJpdmF0ZSBvblRvdWNoZWQ6IEZ1bmN0aW9uO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyKSB7XG4gICAgdGhpcy5vbkNoYW5nZSA9ICh2YWw6IGFueSkgPT4ge307XG4gICAgdGhpcy5vblRvdWNoZWQgPSAoKSA9PiB7fTtcbiAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbDogYW55KTogdm9pZCB7XG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbCkge1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsO1xuICAgIHRoaXMub25DaGFuZ2UodGhpcy5fdmFsdWUpO1xuICB9XG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICB9XG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gIH1cblxuICBuZ09uSW5pdCgpIHt9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgaWYgKHRoaXMuaXNDbGVhciA9PT0gdHJ1ZSkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgdGhpcy52YWx1ZSA9IG51bGw7XG4gICAgICAgICAgdGhpcy5teU1vZGVsID0gdGhpcy52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSwgMSk7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMudmFsdWUpIHtcbiAgICAgICAgdGhpcy5teU1vZGVsID0gdGhpcy52YWx1ZTtcbiAgICAgIH1cbiAgICB9LCAxKTtcbiAgfVxuICBjaGFuZ2UoKSB7XG4gICAgaWYgKHRoaXMudmFsdWVXaXRoQ2hhcmFjdGVyID09PSB0cnVlKSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c2VtaWNvbG9uXG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5teU1vZGVsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5teU1vZGVsLnJlcGxhY2UoL1xcRCsvZywgJycpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZXh0LW1hc2svdGV4dC1tYXNrL2Jsb2IvbWFzdGVyL2NvbXBvbmVudERvY3VtZW50YXRpb24ubWQjcmVhZG1lXG59XG4iXX0=