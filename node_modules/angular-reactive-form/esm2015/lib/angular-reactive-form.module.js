/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Injector } from '@angular/core';
import { AngularReactiveFormComponent } from './angular-reactive-form.component';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { DirectivesModule } from './directives/directives.module';
import { EditorModule } from '@tinymce/tinymce-angular';
import { ReactiveFormComponent } from './components/reactive-form/reactive-form.component';
import { DynamicInputComponent } from './components/dynamic-input/dynamic-input.component';
import { setAppInjector } from './app-injector';
/** @type {?} */
export const UPLOAD_DIRECTIVE_HEADERS = 'UPLOAD_DIRECTIVE_HEADERS';
/** @type {?} */
export const UPLOAD_DIRECTIVE_API_URL = 'UPLOAD_DIRECTIVE_API_URL';
const ɵ0 = {
    example: 'example'
};
export class AngularReactiveFormModule {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        setAppInjector(injector);
    }
}
AngularReactiveFormModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    DirectivesModule,
                    EditorModule
                ],
                declarations: [AngularReactiveFormComponent, ReactiveFormComponent, DynamicInputComponent],
                exports: [AngularReactiveFormComponent, ReactiveFormComponent],
                providers: [
                    {
                        provide: UPLOAD_DIRECTIVE_HEADERS,
                        useValue: ɵ0
                    },
                    {
                        provide: UPLOAD_DIRECTIVE_API_URL,
                        useValue: 'example'
                    }
                ]
            },] }
];
/** @nocollapse */
AngularReactiveFormModule.ctorParameters = () => [
    { type: Injector }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1yZWFjdGl2ZS1mb3JtLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcmVhY3RpdmUtZm9ybS8iLCJzb3VyY2VzIjpbImxpYi9hbmd1bGFyLXJlYWN0aXZlLWZvcm0ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDakYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMzRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMzRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBQ2hELE1BQU0sT0FBTyx3QkFBd0IsR0FBRywwQkFBMEI7O0FBQ2xFLE1BQU0sT0FBTyx3QkFBd0IsR0FBRywwQkFBMEI7V0FhbEQ7SUFDUixPQUFPLEVBQUUsU0FBUztDQUNuQjtBQVFQLE1BQU0sT0FBTyx5QkFBeUI7Ozs7SUFDcEMsWUFBWSxRQUFrQjtRQUM1QixjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7O1lBekJGLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUU7b0JBQ1AsWUFBWTtvQkFDWixtQkFBbUI7b0JBQ25CLGdCQUFnQjtvQkFDaEIsWUFBWTtpQkFDYjtnQkFDRCxZQUFZLEVBQUUsQ0FBQyw0QkFBNEIsRUFBRSxxQkFBcUIsRUFBRSxxQkFBcUIsQ0FBQztnQkFDMUYsT0FBTyxFQUFFLENBQUMsNEJBQTRCLEVBQUUscUJBQXFCLENBQUM7Z0JBQzlELFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsd0JBQXdCO3dCQUNqQyxRQUFRLElBRVA7cUJBQ0Y7b0JBQ0Q7d0JBQ0UsT0FBTyxFQUFFLHdCQUF3Qjt3QkFDakMsUUFBUSxFQUFFLFNBQVM7cUJBQ3BCO2lCQUNGO2FBQ0Y7Ozs7WUFoQ3VDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuZ3VsYXJSZWFjdGl2ZUZvcm1Db21wb25lbnQgfSBmcm9tICcuL2FuZ3VsYXItcmVhY3RpdmUtZm9ybS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBEaXJlY3RpdmVzTW9kdWxlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2RpcmVjdGl2ZXMubW9kdWxlJztcbmltcG9ydCB7IEVkaXRvck1vZHVsZSB9IGZyb20gJ0B0aW55bWNlL3RpbnltY2UtYW5ndWxhcic7XG5pbXBvcnQgeyBSZWFjdGl2ZUZvcm1Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvcmVhY3RpdmUtZm9ybS9yZWFjdGl2ZS1mb3JtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEeW5hbWljSW5wdXRDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZHluYW1pYy1pbnB1dC9keW5hbWljLWlucHV0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBzZXRBcHBJbmplY3RvciB9IGZyb20gJy4vYXBwLWluamVjdG9yJztcbmV4cG9ydCBjb25zdCBVUExPQURfRElSRUNUSVZFX0hFQURFUlMgPSAnVVBMT0FEX0RJUkVDVElWRV9IRUFERVJTJztcbmV4cG9ydCBjb25zdCBVUExPQURfRElSRUNUSVZFX0FQSV9VUkwgPSAnVVBMT0FEX0RJUkVDVElWRV9BUElfVVJMJztcbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBEaXJlY3RpdmVzTW9kdWxlLFxuICAgIEVkaXRvck1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtBbmd1bGFyUmVhY3RpdmVGb3JtQ29tcG9uZW50LCBSZWFjdGl2ZUZvcm1Db21wb25lbnQsIER5bmFtaWNJbnB1dENvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtBbmd1bGFyUmVhY3RpdmVGb3JtQ29tcG9uZW50LCBSZWFjdGl2ZUZvcm1Db21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBVUExPQURfRElSRUNUSVZFX0hFQURFUlMsXG4gICAgICB1c2VWYWx1ZToge1xuICAgICAgICBleGFtcGxlOiAnZXhhbXBsZSdcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IFVQTE9BRF9ESVJFQ1RJVkVfQVBJX1VSTCxcbiAgICAgIHVzZVZhbHVlOiAnZXhhbXBsZSdcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhclJlYWN0aXZlRm9ybU1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHNldEFwcEluamVjdG9yKGluamVjdG9yKTtcbiAgfVxufVxuIl19