/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { InputBase } from '../../models/InputBase';
import * as _ from 'lodash';
export class DynamicInputComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngAfterContentInit() { }
    /**
     * @return {?}
     */
    get isValid() {
        if (this.form.controls[this.input.key].errors) {
            this.validatorForm = this.form.controls[this.input.key].errors;
        }
        return this.submitted && this.form.controls[this.input.key].valid;
    }
    /**
     * @param {?} validators
     * @return {?}
     */
    getError(validators) {
        /** @type {?} */
        const $this = this;
        /** @type {?} */
        let mess = '';
        _.forEach(validators, (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            const errorValidator = value.validator($this.form.controls[$this.input.key]);
            if (!_.isUndefined(errorValidator) && !_.isNil(errorValidator)) {
                /** @type {?} */
                const errorKey = Object.keys(errorValidator)[0];
                if ($this.validatorForm.hasOwnProperty(errorKey)) {
                    mess = value.message;
                    return false;
                }
            }
        }));
        return mess;
    }
    /**
     * @param {?} validators
     * @return {?}
     */
    getAsyncErrors(validators) {
        /** @type {?} */
        let mess = '';
        if (this.form.controls[this.input.key].errors) {
            /** @type {?} */
            const error = this.form.controls[this.input.key].errors[Object.keys(this.form.controls[this.input.key].errors)[0]];
            mess = error.message;
        }
        return mess;
    }
}
DynamicInputComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'dynamic-input',
                template: "<div [formGroup]=\"form\">\r\n  <div [ngSwitch]=\"input.controlType\">\r\n    <div *ngSwitchCase=\"'block'\">\r\n      <div class=\"form-primary\"><div [innerHtml]=\"input.content\"></div></div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'textbox'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <input\r\n          [attr.disabled]=\"input.disabled\"\r\n          [placeholder]=\"input.placeholder\"\r\n          class=\"form-control\"\r\n          [formControlName]=\"input.key\"\r\n          [type]=\"input.type\"\r\n          [min]=\"input.min\"\r\n          [max]=\"input.max\"\r\n        />\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'textarea'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <div>\r\n          <textarea\r\n            [placeholder]=\"input.placeholder\"\r\n            [attr.disabled]=\"input.disabled\"\r\n            [rows]=\"input.rows\"\r\n            id=\"textarea\"\r\n            [formControlName]=\"input.key\"\r\n          ></textarea>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"flex-row\" *ngSwitchCase=\"'dropdown'\">\r\n      <div class=\"reactive-form-group\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <select [attr.disabled]=\"input.disabled\" [formControlName]=\"input.key\" class=\"form-control\">\r\n          <option *ngFor=\"let opt of input.options\" [attr.disabled]=\"opt.disabled\" [ngValue]=\"opt\">{{ opt.label }}</option>\r\n        </select>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'radio'\" class=\"radio\">\r\n      <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n      <div class=\"form-primary\">\r\n        <div class=\"form-radio\">\r\n          <div class=\"group-add-on\">\r\n            <div class=\"radio radiofill\" *ngFor=\"let opt of input.options\">\r\n              <label class=\"radio-label\"\r\n                >{{ opt.label }} <input [attr.disabled]=\"input.disabled\" type=\"radio\" [formControlName]=\"input.key\" [value]=\"opt.value\" />\r\n                <span class=\"checkmark\"></span>\r\n              </label>\r\n              <div [innerHtml]=\"opt.content\"></div>\r\n            </div>\r\n            <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n              <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n              <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- <div *ngSwitchCase=\"'custom_dropdown'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\">{{ input.label }}</label>\r\n        <custom-selection [formControlName]=\"input.key\" name=\"test-dropdown\" [(options)]=\"input.options\"></custom-selection>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div> -->\r\n\r\n    <div *ngSwitchCase=\"'tinymce'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <editor [formControlName]=\"input.key\" [init]=\"{ branding: false, height: input.height, plugins: input.plugins }\"></editor>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'checkbox'\" class=\"checkbox\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\"\r\n          ><span [innerHtml]=\"input.label\"></span>\r\n          <input\r\n            [attr.disabled]=\"input.disabled\"\r\n            [formControlName]=\"input.key\"\r\n            [(ngModel)]=\"input.value\"\r\n            [id]=\"input.key\"\r\n            type=\"checkbox\"\r\n          />\r\n          <span class=\"checkmark\"></span>\r\n        </label>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'list-checkbox'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <mutiple-checkbox\r\n          [isClear]=\"isClear\"\r\n          [isDisabled]=\"input.disabled\"\r\n          [formControlName]=\"input.key\"\r\n          [(options)]=\"input.options\"\r\n        ></mutiple-checkbox>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'textbox-mask'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <mask-input\r\n          [isDisabled]=\"input.disabled\"\r\n          [isClear]=\"isClear\"\r\n          [formControlName]=\"input.key\"\r\n          [placeholder]=\"input.placeholder\"\r\n          [guide]=\"input.guide\"\r\n          [valueWithCharacter]=\"input.valueWithCharacter\"\r\n          [inputMaskText]=\"input.mask\"\r\n        ></mask-input>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'dropzone'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <custom-dropzone\r\n          [headers]=\"input.headers\"\r\n          [resultTransformer]=\"input.resultTransformer\"\r\n          [paramName]=\"input.paramName\"\r\n          [url]=\"input.url\"\r\n          [formControlName]=\"input.key\"\r\n          [oldValue]=\"input.value\"\r\n          [showPreview]=\"input.showPreview\"\r\n          [maxFiles]=\"input.maxFiles\"\r\n          [maxFilesize]=\"input.maxFilesize\"\r\n          [acceptedFiles]=\"input.acceptedFiles\"\r\n          [message]=\"input.message\"\r\n          [upload_path]=\"input.upload_path\"\r\n        ></custom-dropzone>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'datetimepicker'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <div class=\"form-group\">\r\n          <custom-date-time-picker\r\n            [isClear]=\"isClear\"\r\n            [isDisabled]=\"input.disabled\"\r\n            [dateFormat]=\"input.dateFormat\"\r\n            [timeOnly]=\"input.timeOnly\"\r\n            [showTime]=\"input.showTime\"\r\n            [yearRange]=\"input.yearRange\"\r\n            [yearNavigator]=\"input.yearNavigator\"\r\n            [monthNavigator]=\"input.monthNavigator\"\r\n            [showIcon]=\"input.showIcon\"\r\n            [formControlName]=\"input.key\"\r\n            [minDate]=\"input.minDate\"\r\n            [maxDate]=\"input.maxDate\"\r\n          ></custom-date-time-picker>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'phonecode'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <div class=\"form-group\">\r\n          <app-phone-input [isDisabled]=\"input.disabled\" [formControlName]=\"input.key\"></app-phone-input>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'select2'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <div class=\"form-group\">\r\n          <app-custom-select2\r\n            [isDisabled]=\"input.disabled\"\r\n            [isSelectAll]=\"input.isSelectAll\"\r\n            [selectBtnText]=\"input.selectBtnText\"\r\n            [clearBtnText]=\"input.clearBtnText\"\r\n            [isClear]=\"isClear\"\r\n            [id]=\"input.id\"\r\n            [options]=\"input.options\"\r\n            [formControlName]=\"input.key\"\r\n            [placeholder]=\"input.placeholder\"\r\n            [tags]=\"input.tags\"\r\n          ></app-custom-select2>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- <div *ngSwitchCase=\"'custom_checkbox'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\">{{ input.label }}</label>\r\n        <div class=\"form-group\">\r\n          <custom-checkbox [formControlName]=\"input.key\" [onChange]=\"input.onChange\"></custom-checkbox>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div> -->\r\n\r\n    <div *ngSwitchCase=\"'uploadfile'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <upload-images\r\n          [isClear]=\"isClear\"\r\n          [formControlName]=\"input.key\"\r\n          [id]=\"input.id\"\r\n          [oldValue]=\"input.value\"\r\n          [resultTransformer]=\"input.resultTransformer\"\r\n          [paramName]=\"input.paramName\"\r\n          [uploadPath]=\"input.uploadPath\"\r\n          [multiple]=\"input.multiple\"\r\n          [headers]=\"input.headers\"\r\n          [apiUpload]=\"input.apiUpload\"\r\n          [accept]=\"input.accept\"\r\n          [allowMaxSize]=\"input.allowMaxSize\"\r\n        ></upload-images>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'province'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <div class=\"form-group\">\r\n          <province-city [formControlName]=\"input.key\"></province-city>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'selection-by-api'\">\r\n      <div class=\"form-primary\" *ngIf=\"input.multiple === false\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <div class=\"form-group\">\r\n          <selection-by-api\r\n            [isClear]=\"isClear\"\r\n            [formControlName]=\"input.key\"\r\n            [resultTransformer]=\"input.resultTransformer\"\r\n            [headers]=\"input.headers\"\r\n            [apiUpload]=\"input.apiUpload\"\r\n            [fieldName]=\"input.fieldName\"\r\n            [lengthToSearch]=\"input.lengthToSearch\"\r\n            [method]=\"input.method\"\r\n          ></selection-by-api>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-primary\" *ngIf=\"input.multiple === true\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <div class=\"form-group\">\r\n          <multi-selection-by-api\r\n            [isClear]=\"isClear\"\r\n            [formControlName]=\"input.key\"\r\n            [resultTransformer]=\"input.resultTransformer\"\r\n            [headers]=\"input.headers\"\r\n            [apiUpload]=\"input.apiUpload\"\r\n            [fieldName]=\"input.fieldName\"\r\n            [lengthToSearch]=\"input.lengthToSearch\"\r\n            [method]=\"input.method\"\r\n          ></multi-selection-by-api>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'captcha'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <div class=\"form-group\">\r\n          <captcha\r\n            [captchaCorrect]=\"captchaCorrect\"\r\n            [formControlName]=\"input.key\"\r\n            [type]=\"input.type\"\r\n            [numberOfChar]=\"input.numberOfChar\"\r\n            [message]=\"input.message\"\r\n          ></captcha>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'single-select2'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <div class=\"form-group\">\r\n          <single-select2\r\n            [isDisabled]=\"input.disabled\"\r\n            [isClear]=\"isClear\"\r\n            [id]=\"input.id\"\r\n            [options]=\"input.options\"\r\n            [formControlName]=\"input.key\"\r\n            [placeholder]=\"input.placeholder\"\r\n          ></single-select2>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'switch-input'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <div class=\"form-group\">\r\n          <custom-switch-input\r\n            [id]=\"input.id\"\r\n            [isDisabled]=\"input.disabled\"\r\n            [isClear]=\"isClear\"\r\n            [formControlName]=\"input.key\"\r\n          ></custom-switch-input>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'uploadfilev2'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <upload-file\r\n          [isClear]=\"isClear\"\r\n          [formControlName]=\"input.key\"\r\n          [id]=\"input.id\"\r\n          [oldValue]=\"input.value\"\r\n          [resultTransformer]=\"input.resultTransformer\"\r\n          [paramName]=\"input.paramName\"\r\n          [uploadPath]=\"input.uploadPath\"\r\n          [multiple]=\"input.multiple\"\r\n          [headers]=\"input.headers\"\r\n          [apiUpload]=\"input.apiUpload\"\r\n          [accept]=\"input.accept\"\r\n          [allowMaxSize]=\"input.allowMaxSize\"\r\n        ></upload-file>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [":host .reactive-form-group label{font-size:12px;margin-bottom:0}:host #textarea{width:100%}:host .checkbox .float-label{display:block;position:relative;padding-left:35px;margin-bottom:12px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:27px}:host .checkbox .float-label input{position:absolute;opacity:0;cursor:pointer;height:0;width:0}:host .checkbox .checkmark{position:absolute;top:0;left:0;height:25px;width:25px;background-color:#eee}:host .checkbox .float-label:hover input~.checkmark{background-color:#ccc}:host .checkbox .float-label input:checked~.checkmark{background-color:#2196f3}:host .checkbox .checkmark:after{content:'';position:absolute;display:none}:host .checkbox .float-label input:checked~.checkmark:after{display:block}:host .checkbox .float-label .checkmark:after{left:9px;top:5px;width:5px;height:10px;border:solid #fff;border-width:0 3px 3px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}:host .radio .radio-label{display:block;position:relative;padding-left:35px;margin-bottom:12px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:27px}:host .radio .radio-label input{position:absolute;opacity:0;cursor:pointer}:host .radio .checkmark{position:absolute;top:0;left:0;height:25px;width:25px;background-color:#eee;border-radius:50%}:host .radio .radio-label:hover input~.checkmark{background-color:#ccc}:host .radio .radio-label input:checked~.checkmark{background-color:#2196f3}:host .radio .checkmark:after{content:'';position:absolute;display:none}:host .radio .radio-label input:checked~.checkmark:after{display:block}:host .radio .radio-label .checkmark:after{top:9px;left:9px;width:8px;height:8px;border-radius:50%;background:#fff}"]
            }] }
];
/** @nocollapse */
DynamicInputComponent.ctorParameters = () => [];
DynamicInputComponent.propDecorators = {
    input: [{ type: Input }],
    form: [{ type: Input }],
    submitted: [{ type: Input }],
    isClear: [{ type: Input }],
    captchaCorrect: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DynamicInputComponent.prototype.input;
    /** @type {?} */
    DynamicInputComponent.prototype.form;
    /** @type {?} */
    DynamicInputComponent.prototype.submitted;
    /** @type {?} */
    DynamicInputComponent.prototype.isClear;
    /** @type {?} */
    DynamicInputComponent.prototype.captchaCorrect;
    /** @type {?} */
    DynamicInputComponent.prototype.validatorForm;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXJlYWN0aXZlLWZvcm0vIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9keW5hbWljLWlucHV0L2R5bmFtaWMtaW5wdXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBb0IsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNuRCxPQUFPLEtBQUssQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQVM1QixNQUFNLE9BQU8scUJBQXFCO0lBYWhDLGdCQUFlLENBQUM7Ozs7SUFFaEIsa0JBQWtCLEtBQUksQ0FBQzs7OztJQUV2QixJQUFJLE9BQU87UUFDVCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQzdDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7U0FDaEU7UUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDcEUsQ0FBQzs7Ozs7SUFFRCxRQUFRLENBQUMsVUFBVTs7Y0FDWCxLQUFLLEdBQUcsSUFBSTs7WUFDZCxJQUFJLEdBQUcsRUFBRTtRQUNiLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVTs7OztRQUFFLFVBQVMsS0FBSzs7a0JBQzVCLGNBQWMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFOztzQkFDeEQsUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvQyxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFO29CQUNoRCxJQUFJLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztvQkFDckIsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7YUFDRjtRQUNILENBQUMsRUFBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7OztJQUVELGNBQWMsQ0FBQyxVQUFVOztZQUNuQixJQUFJLEdBQUcsRUFBRTtRQUNiLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUU7O2tCQUN2QyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xILElBQUksR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO1NBQ3RCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7WUFyREYsU0FBUyxTQUFDOztnQkFFVCxRQUFRLEVBQUUsZUFBZTtnQkFDekIsa2dsQkFBNkM7O2FBRTlDOzs7OztvQkFFRSxLQUFLO21CQUVMLEtBQUs7d0JBRUwsS0FBSztzQkFFTCxLQUFLOzZCQUVMLEtBQUs7Ozs7SUFSTixzQ0FDc0I7O0lBQ3RCLHFDQUNnQjs7SUFDaEIsMENBQ21COztJQUNuQix3Q0FDaUI7O0lBQ2pCLCtDQUN3Qjs7SUFDeEIsOENBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBBZnRlckNvbnRlbnRJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgSW5wdXRCYXNlIH0gZnJvbSAnLi4vLi4vbW9kZWxzL0lucHV0QmFzZSc7XHJcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcclxuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxyXG4gIHNlbGVjdG9yOiAnZHluYW1pYy1pbnB1dCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2R5bmFtaWMtaW5wdXQuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2R5bmFtaWMtaW5wdXQuY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRHluYW1pY0lucHV0Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XHJcbiAgQElucHV0KClcclxuICBpbnB1dDogSW5wdXRCYXNlPGFueT47XHJcbiAgQElucHV0KClcclxuICBmb3JtOiBGb3JtR3JvdXA7XHJcbiAgQElucHV0KClcclxuICBzdWJtaXR0ZWQ6IEJvb2xlYW47XHJcbiAgQElucHV0KClcclxuICBpc0NsZWFyOiBCb29sZWFuO1xyXG4gIEBJbnB1dCgpXHJcbiAgY2FwdGNoYUNvcnJlY3Q6IEJvb2xlYW47XHJcbiAgdmFsaWRhdG9yRm9ybTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7fVxyXG5cclxuICBnZXQgaXNWYWxpZCgpIHtcclxuICAgIGlmICh0aGlzLmZvcm0uY29udHJvbHNbdGhpcy5pbnB1dC5rZXldLmVycm9ycykge1xyXG4gICAgICB0aGlzLnZhbGlkYXRvckZvcm0gPSB0aGlzLmZvcm0uY29udHJvbHNbdGhpcy5pbnB1dC5rZXldLmVycm9ycztcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLnN1Ym1pdHRlZCAmJiB0aGlzLmZvcm0uY29udHJvbHNbdGhpcy5pbnB1dC5rZXldLnZhbGlkO1xyXG4gIH1cclxuXHJcbiAgZ2V0RXJyb3IodmFsaWRhdG9ycykge1xyXG4gICAgY29uc3QgJHRoaXMgPSB0aGlzO1xyXG4gICAgbGV0IG1lc3MgPSAnJztcclxuICAgIF8uZm9yRWFjaCh2YWxpZGF0b3JzLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICBjb25zdCBlcnJvclZhbGlkYXRvciA9IHZhbHVlLnZhbGlkYXRvcigkdGhpcy5mb3JtLmNvbnRyb2xzWyR0aGlzLmlucHV0LmtleV0pO1xyXG4gICAgICBpZiAoIV8uaXNVbmRlZmluZWQoZXJyb3JWYWxpZGF0b3IpICYmICFfLmlzTmlsKGVycm9yVmFsaWRhdG9yKSkge1xyXG4gICAgICAgIGNvbnN0IGVycm9yS2V5ID0gT2JqZWN0LmtleXMoZXJyb3JWYWxpZGF0b3IpWzBdO1xyXG4gICAgICAgIGlmICgkdGhpcy52YWxpZGF0b3JGb3JtLmhhc093blByb3BlcnR5KGVycm9yS2V5KSkge1xyXG4gICAgICAgICAgbWVzcyA9IHZhbHVlLm1lc3NhZ2U7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBtZXNzO1xyXG4gIH1cclxuXHJcbiAgZ2V0QXN5bmNFcnJvcnModmFsaWRhdG9ycykge1xyXG4gICAgbGV0IG1lc3MgPSAnJztcclxuICAgIGlmICh0aGlzLmZvcm0uY29udHJvbHNbdGhpcy5pbnB1dC5rZXldLmVycm9ycykge1xyXG4gICAgICBjb25zdCBlcnJvciA9IHRoaXMuZm9ybS5jb250cm9sc1t0aGlzLmlucHV0LmtleV0uZXJyb3JzW09iamVjdC5rZXlzKHRoaXMuZm9ybS5jb250cm9sc1t0aGlzLmlucHV0LmtleV0uZXJyb3JzKVswXV07XHJcbiAgICAgIG1lc3MgPSBlcnJvci5tZXNzYWdlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1lc3M7XHJcbiAgfVxyXG59XHJcbiJdfQ==